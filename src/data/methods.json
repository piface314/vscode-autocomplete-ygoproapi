[
  {
    "cls": "Card",
    "infer": "c",
    "methods": [
      {
        "id": "GetCode",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current code (ID/name) of the card \"c\".",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "GetOriginalCode",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original printed code (ID/name) of the card \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalCodeRule",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original code (ID/name) of the card \"c\" while taking into account name clauses/alias (used for the \"original name\" wording).",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "GetFusionCode",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the code/ID that \"c\" has as a Fusion Material (see \"Fusion Tag\").",
        "ret": [
          "number",
          "number ..."
        ]
      },
      {
        "id": "GetLinkCode",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the code/ID that \"c\" has as a Link Material (see \"Formud Skipper\").",
        "ret": [
          "number",
          "number ..."
        ]
      },
      {
        "id": "IsSummonCode",
        "argstr": "c: Card, sc: Card|nil, sumtype: number, playerid: number, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sc",
            "type": "Card|nil"
          },
          {
            "id": "sumtype",
            "type": "number"
          },
          {
            "id": "playerid",
            "type": "number"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has a specific code from the \"...\" list if it is to be used as material for the Summon type \"sumtype\" of \"sc\" performed by the player \"playerid\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsFusionCode",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has a specific code from the \"...\" list as a Fusion Material.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLinkCode",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has a specific code from the \"...\" list as a Link Material.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSetCard",
        "argstr": "c: Card, setname: number[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "setname",
            "type": "number"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if \"c\" is part of the archetype \"setname\" (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOriginalSetCard",
        "argstr": "c: Card, setname: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "setname",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" is originally part of the archetype \"setname\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPreviousSetCard",
        "argstr": "c: Card, setname: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "setname",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" was previously part of the archetype \"setname\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsFusionSetCard",
        "argstr": "c: Card, setname: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "setname",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" is part of the archetype \"setname\" if it is to be used as a Fusion Material.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetSetCard",
        "argstr": "c: Card[, scard: Card|nil, sumtype: number=0, playerid: number=PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns the archetype(s) that \"c\" has (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "number ..."
        ]
      },
      {
        "id": "GetOriginalSetCard",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original archetype(s) that \"c\" is a part of.",
        "ret": [
          "number ..."
        ]
      },
      {
        "id": "GetPreviousSetCard",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the archetype(s) that \"c\" was part of previously.",
        "ret": [
          "number ..."
        ]
      },
      {
        "id": "GetFusionSetCard",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the archetype(s) that \"c\" is a part of if it is to be used as a Fusion Material.",
        "ret": [
          "number ..."
        ]
      },
      {
        "id": "IsLinkSummonable",
        "argstr": "c: Card[, must_use: Group|Card|nil, mg: Group|Card|nil, min: number=0, max: number=0]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "must_use",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if \"c\" can be Link Summoned using \"must_use\" as part of its materials, choosing among \"mg\", with \"min\" and \"max\" materials to be used for the Link Summon.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLinkSetCard",
        "argstr": "c: Card, setname: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "setname",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" is part of the archetype \"setname\" as a Link Material.\n",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetType",
        "argstr": "c: Card[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Gets the current type of a Card (Card c) where (Card scard) if provided checks the monster that (Card c) would be used as material, (int sumtype) is for checking the summon type and (int playerid) is the player checking the type.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalType",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original card type (Monster/Spell/Trap) of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLevel",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current Level of \"c\". (Returns 0 if it has no Level, e.g. Xyz/Link.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetRank",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current Rank of \"c\". (Returns 0 if it has no Rank.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLink",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current Link Rating of \"c\". (Returns 0 if it has no Link Rating.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetSynchroLevel",
        "argstr": "c: Card, sc: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sc",
            "type": "Card"
          }
        ],
        "desc": "Returns the Level of \"c\" if it would be used as a Synchro Material for \"sc\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetRitualLevel",
        "argstr": "c: Card, rc: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "rc",
            "type": "Card"
          }
        ],
        "desc": "Returns the Level of \"c\" if it would be Tributed for the Ritual Summon of \"rc\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalLevel",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original Level of \"c\". (Returns 0 if it has no Level, e.g. Xyz/Link.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalRank",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original Rank of \"c\". (Returns 0 if it has no Rank.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsXyzLevel",
        "argstr": "c: Card, xyzc: Card, lv: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "xyzc",
            "type": "Card"
          },
          {
            "id": "lv",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" would be Level \"lv\" if it was to be used as Xyz Material for \"xyzc\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetLeftScale",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current left Pendulum Scale of \"c\". (Returns 0 if it has no Pendulum Scale.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalLeftScale",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original left Pendulum Scale of \"c\". (Returns 0 if it has no Pendulum Scale.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetRightScale",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current right Pendulum Scale of \"c\". (Returns 0 if it has no Pendulum Scale.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalRightScale",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original right Pendulum Scale of \"c\". (Returns 0 if it has no Pendulum Scale.)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsLinkMarker",
        "argstr": "c: Card, markers: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "markers",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) has the Link markers represented by (int markers)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetLinkedGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns a group with all the cards that \"c\" points to. (Returns an empty group if it does not point to any cards.)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetLinkedGroupCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the number of cards that \"c\" points to.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLinkedZone",
        "argstr": "c: Card[, cp: number = c:GetControler()]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "cp",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns all the zones that \"c\" points to (on the field of player \"cp\").",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetFreeLinkedZone",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns all the zones that \"c\" points to that are not occupied by a card.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetMutualLinkedGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns a group with all the cards that are co-linked with \"c\". (Returns an empty group if there are none.)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetMutualLinkedGroupCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the number of cards that are co-linked with \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetMutualLinkedZone",
        "argstr": "c: Card, cp: number = c:GetControler()",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "cp",
            "type": "number"
          }
        ],
        "desc": "Gets all zones that (Card c) points to as part of a co-Link, that belong to player (int cp)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsLinked",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if \"c\" is linked. (A card is linked if it is pointing to another card, or if another card is pointing to it.)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetColumnGroup",
        "argstr": "c: Card[, left: number|nil, right: number|nil]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "left",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "right",
            "type": "number|nil",
            "opt": true
          }
        ],
        "desc": "Returns a group with all the cards that are in the same column as \"c\". If \"left\" or \"right\" are provided, the returned group will also include the cards from the N columns on the left or right of \"c\" respectively, where N is the number passed for the \"left\" or \"right\" parameter.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetColumnGroupCount",
        "argstr": "c: Card[, left: number|nil, right: number|nil]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "left",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "right",
            "type": "number|nil",
            "opt": true
          }
        ],
        "desc": "Returns the number of cards that are in the same column as \"c\". If \"left\" or \"right\" are provided, the returned number will also include the cards from the N columns on the left or right of \"c\" respectively, where N is the number passed for the \"left\" or \"right\" parameter.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetColumnZone",
        "argstr": "c: Card, loc: number[, cp: number = c:GetControler()|nil, left: number|nil, right: number|nil]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "loc",
            "type": "number"
          },
          {
            "id": "cp",
            "type": "number",
            "opt": true
          },
          {
            "id": "left",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "right",
            "type": "number|nil",
            "opt": true
          }
        ],
        "desc": "Returns all the zones in the same column as \"c\" that are part of the location \"loc\". If \"cp\" is provided, the returned zones will only include the ones that belong to player \"cp\". If \"left\" or \"right\" are provided, the returned zones will also include the ones from the N columns on the left or right of \"c\" respectively, where N is the number passed for the \"left\" or \"right\" parameter.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsAllColumn",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if all the zones of the column that \"c\" is on are occupied.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetAttribute",
        "argstr": "c: Card[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns the current Attribute of \"c\" (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalAttribute",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original Attribute of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetRace",
        "argstr": "c: Card[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns the current Monster Type of \"c\" (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOriginalRace",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original Monster Type of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetAttack",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current ATK of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetBaseAttack",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original ATK of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetTextAttack",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original printed ATK of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetDefense",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current DEF of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetBaseDefense",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original DEF of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetTextDefense",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the original printed DEF of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousCodeOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the code/ID that \"c\" had when it was on the field.",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "GetPreviousTypeOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the card type that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousLevelOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the Level that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousRankOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the Rank that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousAttributeOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the Attribute that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousRaceOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the Monster Type that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousAttackOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the ATK that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousDefenseOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the DEF that \"c\" had when it was on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOwner",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the owner of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetControler",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the controller of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousControler",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the previous controller of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetReason",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the reason for an event that happened to \"c\" (e.g. cost, effect).",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetReasonCard",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the card which is the reason that an event happened to \"c\".",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetToBeLinkedZone",
        "argstr": "tc: card, c: card, tp: number[, clink: boolean = false, emz: boolean = false]",
        "args": [
          {
            "id": "tc",
            "type": "card"
          },
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "clink",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "emz",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Returns the zone(s) of a player \"tp\" such that \"c\" would point to \"tc\" if \"tc\" would be summoned. If \"clink\" is set to true it will only return the zone(s) so that \"c\" and \"tc\" would be co-linked. Set \"emz\" to true if the summoned monster could be placed in the Extra Monster Zone so that the possibility of Extra Linking is accounted for (see \"G Golem Crystal Heart\" for an example use).",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetReasonPlayer",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the player that is the reason for an event that happened to \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetReasonEffect",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the effect which is the reason for an event that happened to \"c\".",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "SetReason",
        "argstr": "c: Card, reason: number[, keep: boolean=false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "keep",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Sets the reason of \"c\" as \"reason\". If \"keep\" is set to true \"c\" will maintain the previous reason that it had."
      },
      {
        "id": "SetReasonCard",
        "argstr": "c: Card, rc: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "rc",
            "type": "Card"
          }
        ],
        "desc": "Sets \"rc\" as the card that was the reason of an event that happened to \"c\"."
      },
      {
        "id": "SetReasonPlayer",
        "argstr": "c: Card, rp: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Sets \"rp\" as the player that was the reason of an event that happened to \"c\"."
      },
      {
        "id": "SetReasonEffect",
        "argstr": "c: Card, re: Effect",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "re",
            "type": "Effect"
          }
        ],
        "desc": "Sets \"re\" as the effect that was the reason of an event that happened to \"c\"."
      },
      {
        "id": "GetPosition",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the current position of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousPosition",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the previous position of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetBattlePosition",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the position of \"c\" at the start of the Damage Step (see \"Marshmallon\").",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLocation",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the location of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousLocation",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the previous location of \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetSequence",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the sequence/order of the location of (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPreviousSequence",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the sequence/order of the location of (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetSummonType",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the type in which (Card c) was Summoned",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetSummonLocation",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the location that \"c\" was summoned from.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetSummonPlayer",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the player that summoned \"c\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetDestination",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the location that \"c\" would be sent to (e.g. when it would be destroyed).",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLeaveFieldDest",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the location that \"c\" would be sent to when it leaves the field, while taking into account effects that redirect that location (e.g. \"but banish it if it leaves the field\").",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetTurnID",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the turn that \"c\" was sent/placed to its current location.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetFieldID",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the field ID of \"c\" when it was placed on the field.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetRealFieldID",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the unique field ID that \"c\" has.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetCardID",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns the internal card ID that \"c\" has. This will be unique per card and won't change during the course of the duel.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsCode",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has at least 1 code/ID among the \"...\" list.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsType",
        "argstr": "c: Card, type: number[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "type",
            "type": "number"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if the card type of \"c\" is \"type\" (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLevel",
        "argstr": "c: Card, lv: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "lv",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has a Level equal to \"lv\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRank",
        "argstr": "c: Card, rk: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "rk",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has a Rank equal to \"rk\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLink",
        "argstr": "c: Card, lk: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "lk",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has a Link Rating equal to \"lk\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRace",
        "argstr": "c: Card, race: number[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "race",
            "type": "number"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if the Monster Type of \"c\" is \"race\" (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAttribute",
        "argstr": "c: Card, attribute: number[, scard: Card|nil, sumtype: number = 0, playerid: number = PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "attribute",
            "type": "number"
          },
          {
            "id": "scard",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "playerid",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if the Attribute of \"c\" is \"attribute\" (if it is to be used as material for \"scard\" with Summon type \"sumtype\" by player \"playerid\").",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsReason",
        "argstr": "c: Card, reason: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Checks if the reason for an event that happened to \"c\" is \"reason\" (REASON_x).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSummonType",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" is Summoned by one of the summon types in the \"...\" list.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsStatus",
        "argstr": "c: Card, status: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "status",
            "type": "number"
          }
        ],
        "desc": "Checks if \"c\" has the given status (STATUS_x)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsNotTuner",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if \"c\" is a non-Tuner monster.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SetStatus",
        "argstr": "c: Card, status: number, enable: boolean",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "status",
            "type": "number"
          },
          {
            "id": "enable",
            "type": "boolean"
          }
        ],
        "desc": "Sets the status (STATUS_x) of a Card (Card c) and possibly enables it"
      },
      {
        "id": "IsGeminiState",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a Card (Card c) is a Gemini monster with its effect enabled.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "EnableGeminiState",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Enables the Gemini effect of a card (Card c)."
      },
      {
        "id": "SetTurnCounter",
        "argstr": "c: Card, counter: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "counter",
            "type": "number"
          }
        ],
        "desc": "Sets the turn counter of a Card (Card c) to a value (int count)"
      },
      {
        "id": "GetTurnCounter",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the turn counter of a Card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SetMaterial",
        "argstr": "c: Card, g: Group",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Sets the Material of a Card (Card c) to another Group (Group g)"
      },
      {
        "id": "GetMaterial",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the material which was used as cost for a Card (Card c)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetMaterialCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of materials used as cost for a Card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetEquipGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a Group of Cards equipped to a Card (Card c)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetEquipCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of cards equipped to a Card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetEquipTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the Card that a Card (Card c) is equipped to",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetPreviousEquipTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the Card that a Card (Card c) was equipped to",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "CheckEquipTarget",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Checks if a Card (Card c1) has another Card (Card c2) as equip target",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetUnionCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets Amount of Union monsters equipped to a Card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOverlayGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the cards overlayed to a Card (Card c)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetOverlayCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of cards overlayed to a Card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOverlayTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the card that (Card c) is an overlay of",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "CheckRemoveOverlayCard",
        "argstr": "c: Card, player: number, count: number, reason: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Checks if the player (int player) can remove a number (int count) of Xyz materials from a Card c for a specific reason (int reason)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RemoveOverlayCard",
        "argstr": "c: Card, player: number, min: number, max: number, reason: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Makes player (int Player) remove overlay cards from a Card (Card c), with minimum of (int min) and maximum of (int max) with (int reason) as reason",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetAttackedGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a group of cards attacked by Card c, cleared before drawing and when starting second Battle Phase",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetAttackedGroupCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of cards attacked by Card c, set to 0 before drawing and when starting second Battle Phase",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetAttackedCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of successful(not negated) attacks done by Card c, set to 0 before drawing and when starting second Battle Phase",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetBattledGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a Group of cards that are battled (all the attacking and the attacked cards), cleared at predraw and when starting second Battle Phase",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetBattledGroupCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the count of cards that has battled (all the attacking and the attacked cards)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetAttackAnnouncedCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of attacks declared by Card c, set to 0 before drawing and when starting second Battle Phase",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsDirectAttacked",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a Card (Card c) has successfully attacked directly",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SetCardTarget",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Sets the second card (Card c2) as a target of the first card (Card c1)"
      },
      {
        "id": "GetCardTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the group of cards that a card (Card c) is assigned targets to",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetFirstCardTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Get the first of a card (Card c)'s target cards. A bit faster than Card.GetCardTarget(Card c):GetFirst()",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetCardTargetCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of targets that a card (Card c) is assigned to",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsHasCardTarget",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Checks whether the second card (Card c2) is a target of the first card (Card c1)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CancelCardTarget",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Removes the second card (Card c2) from the list of the first card (Card c1)'s target"
      },
      {
        "id": "GetOwnerTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a group of cards (including equips) that a card (Card c) is a target of",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetOwnerTargetCount",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets the number of cards (including equips) that a card (Card c) is a target of",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetActivateEffect",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a card (Card c)'s EFFECT_TYPE_ACTIVATE effect",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "CheckActivateEffect",
        "argstr": "c: Card, neglect_con: boolean, neglect_cost: boolean, copy_info: boolean",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "neglect_con",
            "type": "boolean"
          },
          {
            "id": "neglect_cost",
            "type": "boolean"
          },
          {
            "id": "copy_info",
            "type": "boolean"
          }
        ],
        "desc": "Checks a card (Card c)'s EFFECT_TYPE_ACTIVATE effect while checking for whether it can be activated. Returns _nil_ if effect condition is not met. Set _neglect_con_ to _true_ to ignore condition checking. Set _neglect_cost_ to _true_ to ignore cost payable checking. Set _copy_info_ to true to return the activate effect's supposed info, for other than EVENT_FREE_CHAIN usually (eg,ep,ev,r,re,rp)",
        "ret": [
          "Effect",
          "Group",
          "number",
          "number",
          "Effect",
          "number",
          "number"
        ]
      },
      {
        "id": "RegisterEffect",
        "argstr": "c: Card, e: Effect[, forced: boolean=false, ...]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "forced",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Registers an Effect (Effect e) (usually an Effect created with Effect.CreateEffect()) to a Card (Card c), ... is a list of integers which Registers further effects in the utility.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsHasEffect",
        "argstr": "c: Card, code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Checks if a Card (Card c) has an Effect (EFFECT_x)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetCardEffect",
        "argstr": "c: Card,  [, effect_type: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "effect_type",
            "type": "number"
          }
        ],
        "desc": "Returns all the effect with that code (int effect_type) applied on a card (Card c). With no effect_type or effect_type=0 it will return all the effects applied on a (Card c). [effect_type refer to \"EFFECT_\" constants, eg: EFFECT_NECRO_VALLEY]",
        "ret": [
          "Effect",
          "..."
        ]
      },
      {
        "id": "ResetEffect",
        "argstr": "c: Card, reset_code: number, reset_type: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "reset_code",
            "type": "number"
          },
          {
            "id": "reset_type",
            "type": "number"
          }
        ],
        "desc": "Resets all effects of a Card (Card c) (e.g. \"c:ResetEffect(RESET_DISABLE,RESET_EVENT)\")"
      },
      {
        "id": "GetEffectCount",
        "argstr": "c: Card, code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Gets the amount of an Effect (EFFECT_x) registered to a Card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "RegisterFlagEffect",
        "argstr": "c: Card, code: number, reset_flag: number, property: number, reset_count: number[, label: number, desc: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "reset_flag",
            "type": "number"
          },
          {
            "id": "property",
            "type": "number"
          },
          {
            "id": "reset_count",
            "type": "number"
          },
          {
            "id": "label",
            "type": "number",
            "opt": true
          },
          {
            "id": "desc",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Registers a flag effect to a card (Card c) with (int code) that resets with (int reset_flag), as the effect code. (int reset_flag).",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "GetFlagEffect",
        "argstr": "c: Card, code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Gets the flag effect with (int code) as the effect code that is registered to a card (Card c), returns 0 if no effect, a positive integer otherwise",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ResetFlagEffect",
        "argstr": "c: Card, code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Resets a flag with (int code) as the effect code from a card (Card c)"
      },
      {
        "id": "SetFlagEffectLabel",
        "argstr": "c: Card, code: number, label: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "label",
            "type": "number"
          }
        ],
        "desc": "Assigns an integer (int label) number to the flag effect attached to a card (Card c) with (int code) as the effect code",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetFlagEffectLabel",
        "argstr": "c: Card, code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Gets the integer label to the flag effect attached to a card (Card c) with (int code) as the effect code, returns nil if there is no integer label.",
        "ret": [
          "number|nil"
        ]
      },
      {
        "id": "CreateRelation",
        "argstr": "c1: Card, c2: Card, reset_flag: number",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          },
          {
            "id": "reset_flag",
            "type": "number"
          }
        ],
        "desc": "Creates a relation between the first card (Card c1) and the second card (Card c2), which will be reset when the first card hits the reset flag"
      },
      {
        "id": "ReleaseRelation",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Releases the relation between the first card (Card c1) and the second card (Card c2). Does not release relation from the second card that is resulting from _c2:CreateRelation(c1)_"
      },
      {
        "id": "CreateEffectRelation",
        "argstr": "c: Card, e: Effect",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Creates a relation between a card (Card c) and an effect (Effect e)"
      },
      {
        "id": "ReleaseEffectRelation",
        "argstr": "c: Card, e: Effect",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Releases any relation between a card (Card c) and an effect (Effect e)"
      },
      {
        "id": "ClearEffectRelation",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Clears any relation between a card (Card c) and all effects and chains"
      },
      {
        "id": "IsRelateToEffect",
        "argstr": "c: Card, e: Effect",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Checks whether a card (Card c) is related to an effect (Effect e)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRelateToChain",
        "argstr": "c: Card, chainc: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "chainc",
            "type": "number"
          }
        ],
        "desc": "Checks whether a card (Card c) is related to the chain numbered (int chainc)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRelateToCard",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Checks whether a card (Card c1) is related to another card (Card c2) (That results from _c1:CreateRelation(c2)_)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRelateToBattle",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks whether a card (Card c) is related to battle (either as attacker or as an attack target)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CopyEffect",
        "argstr": "c: Card, code: number, reset_flag: number[, reset_count: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "reset_flag",
            "type": "number"
          },
          {
            "id": "reset_count",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Temporarily adds to a card (Card c) the effect of card with the specified card code (int code) that resets according to the ascribed reset flag (int reset_flag)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ReplaceEffect",
        "argstr": "c: Card, code: number, reset_flag: number[, reset_count: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "reset_flag",
            "type": "number"
          },
          {
            "id": "reset_count",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Temporarily replace all effects of a card (Card c) with the effect of card with the specified card code (int code) that resets according to the ascribed reset flag (int reset_flag)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "EnableUnsummonable",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Makes a card (Card c) unsummonable except with its own procedure"
      },
      {
        "id": "EnableReviveLimit",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Makes a card (Card c) unsummonable except with its own procedure, or after it's Summon procedure is complete"
      },
      {
        "id": "CompleteProcedure",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Makes a card (Card c) be considered that it's Summon procedure is complete"
      },
      {
        "id": "IsDisabled",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks whether a card (Card c) is disabled, equivalent with c:IsStatus(STATUS_DISABLED)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDestructable",
        "argstr": "c: Card[, e: Effect]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect",
            "opt": true
          }
        ],
        "desc": "Checks whether a card (Card c) can be destroyed; if an effect (effect e) is given, checks whether the card can be destroyed by that effect",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSummonableCard",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is normally summonable, returns false when the card is subject of Card.EnableUnsummonable or Card.EnableReviveLimit",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSpecialSummonable",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is summonable by it's summon procedure",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSynchroSummonable",
        "argstr": "c: Card[, must_use: Group|Card|nil, mg: Group|Card|nil, min: number=0, max: number=0]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "must_use",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if \"c\" can be Synchro Summoned using \"must_use\" as part of its materials, choosing among \"mg\", with \"min\" and \"max\" materials to be used for the Synchro Summon. How this works is that the script would check for all EFFECT_SPSUMMON_PROC that has SUMMON_TYPE_SYNCHRO as it's Value, then checks the effects' Condition with the provided arguments. Check out \"aux.SynCondition\" in \"proc_synchro.lua\" for how this is handled.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsXyzSummonable",
        "argstr": "c: Card[, must_use: Group|Card|nil, mg: Group|Card|nil, min: number=0, max: number=0]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "must_use",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if \"c\" can be Xyz Summoned using \"must_use\" as part of its materials, choosing among \"mg\", with \"min\" and \"max\" materials to be used for the Xyz Summon",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSummonable",
        "argstr": "c: Card, ignore_count: boolean, e: Effect|nil[, min: number=0]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ignore_count",
            "type": "boolean"
          },
          {
            "id": "e",
            "type": "Effect|nil"
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks whether a card (Card c) can be Normal Summoned. Setting ignore_count to true makes it ignore the standard once per turn summon limit. If an effect (Effect e) is given, checks whether it can be Normal Summoned by that effect. The last value denotes the minimum tribute amount.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsMSetable",
        "argstr": "d: Car, ignore_count: boolean, e: Effect|nil[, min: number=0]",
        "args": [
          {
            "id": "d",
            "type": "Car"
          },
          {
            "id": "ignore_count",
            "type": "boolean"
          },
          {
            "id": "e",
            "type": "Effect|nil"
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks whether a card (Card c) can be Normal Set as a monster. Setting ignore_count to true makes it ignore the standard once per turn summon limit. If an effect (Effect e) is given, checks whether it can be Normal Summoned by that effect. The last value denotes the minimum tribute amount.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSSetable",
        "argstr": "c: Card[, ignore_field: boolean=false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ignore_field",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Checks whether a card (Card c) can be Set in S/T zone. Setting ignore_field to true makes it not check for free space in the S/T Zone.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeSpecialSummoned",
        "argstr": "c: Card, e: Effect, sumtype: number, sumplayer: number, nocheck: boolean, nolimit: boolean[, sumpos: number=POS_FACEUP, target_player: number=sumplayer]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "sumtype",
            "type": "number"
          },
          {
            "id": "sumplayer",
            "type": "number"
          },
          {
            "id": "nocheck",
            "type": "boolean"
          },
          {
            "id": "nolimit",
            "type": "boolean"
          },
          {
            "id": "sumpos",
            "type": "number",
            "opt": true
          },
          {
            "id": "target_player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks whether a card (Card c) can be Special Summoned by (Effect e), by a summon of type (int sumtype), by player (int sumplayer), in position (int sumpos), to (int target_player)'s side of the field. If (bool nocheck) is true, it will check for a summon ignoring conditions. If (bool nolimit) is true, it will check for a summon ignoring the revive limit. ",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToHand",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Return if the card c can be returned to the hand (return true or false)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToDeck",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Return if the card c can be returned to the Deck (return true or false)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToExtra",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Return if the card c can be returned to the Extra Deck (return true or false)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToGrave",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to go to the Graveyard",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToRemove",
        "argstr": "c: Card[, player: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) is able to be banished",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToHandAsCost",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to go to the Hand as a cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToDeckAsCost",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to go to the Deck as a cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToExtraAsCost",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to go to the Extra Deck as a cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToDeckOrExtraAsCost",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to go to either the Deck or the Extra Deck as a cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToGraveAsCost",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to go to the Graveyard as a cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToRemoveAsCost",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to be banished as a cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsReleasable",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to be Tributed",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsReleasableByEffect",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is able to be Tributed by a card effect",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDiscardable",
        "argstr": "d: Car[, reason: number=REASON_COST]",
        "args": [
          {
            "id": "d",
            "type": "Car"
          },
          {
            "id": "reason",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) can be discarded for (int reason).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanAttack",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) can attack",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CanChainAttack",
        "argstr": "c: Card[, ac: number = 2, monsteronly: boolean = false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ac",
            "type": "number",
            "opt": true
          },
          {
            "id": "monsteronly",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) can make a follow-up attack. Specifying the integer ac checks whether it can attack that number of times. Setting monsteronly to true checks only the possibility of follow-up attack to monster",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsFaceup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is face-up",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAttack",
        "argstr": "c: Card, value: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "value",
            "type": "number"
          }
        ],
        "desc": "Returns if a card (Card c) has an ATK equal to int value",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAttackPos",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is in Attack position",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsFacedown",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is face-down",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDefense",
        "argstr": "c: Card, value: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "value",
            "type": "number"
          }
        ],
        "desc": "Returns if a card (Card c) has an DEF equal to int value",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDefensePos",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is in Defense position",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPosition",
        "argstr": "c: Card, pos: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "pos",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) is in the specified position (int pos)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPreviousPosition",
        "argstr": "c: Card, pos: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "pos",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) is previously in the specified position (int pos)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsControler",
        "argstr": "c: Card, controler: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "controler",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has player (int p) as it's controller",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOnField",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is located on the field",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLocation",
        "argstr": "c: Card, location: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "location",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) is located on the specified location (int location)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPreviousLocation",
        "argstr": "c: Card, location: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "location",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) is previously located on the specified location (int location)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLevelBelow",
        "argstr": "c: Card, level: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "level",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has level equal or below the specified number (int level), will return false if the card has no level.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLevelAbove",
        "argstr": "c: Card, level: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "level",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has level equal or above the specified number (int level), will return false if the card has no level.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRankBelow",
        "argstr": "c: Card, rank: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "rank",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has rank equal or below the specified number (int rank), will return false if the card has no rank",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRankAbove",
        "argstr": "c: Card, rank: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "rank",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has rank equal or above the specified number (int rank), will return false if the card has no rank",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLinkBelow ",
        "argstr": "c: Card, link_rating: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "link_rating",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) has a Link Rating (link_rating) equal or lower than the given number",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLinkAbove ",
        "argstr": "c: Card, link_rating: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "link_rating",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) has a Link Rating (link_rating) equal or greater than the given number",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAttackBelow",
        "argstr": "c: Card, atk: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "atk",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has ATK equal or below the specified number (int attack), will return false if the card has ? ATK and is not face-up on the field.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAttackAbove",
        "argstr": "c: Card, atk: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "atk",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has ATK equal or above the specified number (int attack), will return false if the card has ? ATK and is not face-up on the field.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDefenseBelow",
        "argstr": "c: Card, def: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "def",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has DEF equal or below the specified number (int defense), will return false if the card has ? DEF and is not face-up on the field.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDefenseAbove",
        "argstr": "c: Card, def: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "def",
            "type": "number"
          }
        ],
        "desc": "Checks if a card (Card c) has DEF equal or above the specified number (int defense), will return false if the card has ? DEF and is not face-up on the field.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPublic",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card's (Card c) information is known to both players. In practice, about the same as c:IsPosition(POS_FACEUP)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsForbidden",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is forbidden to be used (equal to calling c:IsStatus(STATUS_FORBIDDEN))",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsAbleToChangeControler",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) is capable of having it's control changed. Checks only whether the card is affected by EFFECT_CANNOT_CHANGE_CONTROL.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsControlerCanBeChanged",
        "argstr": "c: Card[, ign: boolean = false, zone: number = 0xff]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ign",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) can change control. Checks whether the card is in Monster Zone and whether the opposing player has enough space, in addition of checking for EFFECT_CANNOT_CHANGE_CONTROL. if a zone is provided, it uses only these zones as references. (also ign is supposed to be ignore monster zone checking)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AddCounter",
        "argstr": "c: Card, countertype: number, count: number[, singly: number=false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "singly",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Adds a number (int count) of the specified counter (int countertype) to a card (Card c). If singly is set to a number, then it will be added by that number each time. When the number of added counter would exceed the limit for that card, it is not added.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RemoveCounter",
        "argstr": "c: Card, player: number, countertype: number, count: number, reason: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Remove a number (int count) of the specified counter (int countertype) from a card (Card c), with reason described by (int reason)"
      },
      {
        "id": "GetCounter",
        "argstr": "c: Card, countertype: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "countertype",
            "type": "number"
          }
        ],
        "desc": "Gets the number of counter (int countertype) on a card (Card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetHandSynchro",
        "desc": "",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetTunerLimit",
        "desc": "",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsCanBeMaterial",
        "argstr": "c: Card, summontype: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "summontype",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "EnableCounterPermit",
        "argstr": "c: Card, countertype: number[, location: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "location",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Makes the card (Card c) able to hold a type of counter (int countertype). If a location is provided (int location), the card will be able to hold counter only when in the specified location."
      },
      {
        "id": "IsFusionSummonableCard",
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SetCounterLimit",
        "argstr": "c: Card, countertype: number, count: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Sets the limit (int count) of how many counter of a type (int countertype) can be held by a card (Card c)"
      },
      {
        "id": "IsCanChangePosition ",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if the given (Card c) can change its battle position",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanTurnSet",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) can be made to face-down position (Set)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanAddCounter",
        "argstr": "c: Card, countertype: number, count: number[, singly: number=false, loc: number = 0]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "singly",
            "type": "number",
            "opt": true
          },
          {
            "id": "loc",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if a number (int count) of the specified counter (int countertype) can be added to a card (Card c). When the number of added counter would exceed the limit for that card, if singly is set to an integer, then it may return true if the amount of singly doesn't exceed the limit, otherwise, it will return false, if location is specified, it return if it could receive counter when placed on that location.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanRemoveCounter",
        "argstr": "c: Card, player: number, countertype: number, count: number, reason: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Checks if a number (int count) of the specified counter (int countertype) can be removed from a card (Card c), with reason described by (int reason)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeFusionMaterial",
        "argstr": "c: Card[, fc: Card, ignore_mon: boolean=false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "fc",
            "type": "Card",
            "opt": true
          },
          {
            "id": "ignore_mon",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) can be a Fusion material. If (Card fc) is provided, checks if it can be a Fusion Material for that card. If ignore_mon is true, it does not check whether the card is a monster.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeSynchroMaterial",
        "argstr": "c: Card[, sc: Card, tuner: Card]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sc",
            "type": "Card",
            "opt": true
          },
          {
            "id": "tuner",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) can be used as a Synchro Material. If (Card sc) is provided, checks if it can be a Synchro Material for that card. If (Card tuner) is also provided, also checks if it can be a Synchro Material if the tuner if that card.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeRitualMaterial",
        "argstr": "c: Card[, sc: Card]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sc",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Checks if a card (Card c) can be used as Tribute for Ritual Summon. If (Card sc) is provided, checks if it can be used as Tribute for that card's Ritual Summon.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeXyzMaterial",
        "argstr": "c: Card, sc: Card|nil",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sc",
            "type": "Card|nil"
          }
        ],
        "desc": "Checks if a card (Card c) can be used as an Xyz Material. If (Card sc) is provided, checks if it can be used for that card's Xyz Summon.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeLinkMaterial",
        "argstr": "c: Card,  [linkc: Card, player: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "linkc",
            "type": "Card"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if (Card c) can be used as material for a (Card linkc). \"player\" is only an additional parameter, is used to send it to the functions as an additional parameter, such as target (function in SetTarget) or operation (function in SetOperation).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckFusionMaterial",
        "argstr": "c: Card[, g: Group, gc: Card|nil, chkf: number=PLAYER_NONE]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "g",
            "type": "Group",
            "opt": true
          },
          {
            "id": "gc",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "chkf",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Check if g contains a set of fusion material that c needs [must contain gc]\n## Check the Condition function for the effect of EFFECT_FUSION_MATERIAL according to the type of c",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckFusionSubstitute",
        "argstr": "c: Card, fc: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "fc",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) can be treated as a substitute for one of a Fusion Monster's (Card fc) Fusion Material.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsImmuneToEffect",
        "argstr": "c: Card, e: Effect",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Checks if a card (Card c) is not affected by an effect (Effect e)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeEffectTarget",
        "argstr": "c: Card, e: Effect",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Checks if a card (Card c) is targetable by an effect (Effect e)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanBeBattleTarget",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c1) is a valid battle target for another card (Card c2)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AddMonsterAttribute",
        "argstr": "c: Card, extra_type: number,  [attribute: number, race: number, level: number, atk: number, def: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "extra_type",
            "type": "number"
          },
          {
            "id": "attribute",
            "type": "number"
          },
          {
            "id": "race",
            "type": "number",
            "opt": true
          },
          {
            "id": "level",
            "type": "number",
            "opt": true
          },
          {
            "id": "atk",
            "type": "number",
            "opt": true
          },
          {
            "id": "def",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Transforms a card (Card c) to a monster. The card type will become TYPE_MONSTER + extra_type. Uses the values if provided, otherwise uses the card's own values in Database. Be aware that the values added using this (except for Card type) will be reset when the card is flipped face-down."
      },
      {
        "id": "AddMonsterAttributeComplete",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Used in conjunction with Card.AddMonsterAttribute, completes a card's (Card c) transformation to a monster. It is best to call this after the card has arrived in Monster Zone (i.e. after Duel.SpecialSummonStep). Does nothing with cards without EFFECT_PRE_MONSTER (added automatically by Card.AddMonsterAttribute)."
      },
      {
        "id": "CancelToGrave",
        "argstr": "c: Card[, cancel: boolean=true]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "cancel",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "if cancel is true, cancels the to-grave rule and movement of a card (Card c). If false, enforce the rule that it must go from the field to Graveyard instead."
      },
      {
        "id": "GetTributeRequirement",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Give a min and a max tribute requirement of a card",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "GetBattleTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a card's (Card c) current battle target",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetAttackableTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Gets a card's (Card c) valid attack targets",
        "ret": [
          "Group",
          "boolean"
        ]
      },
      {
        "id": "SetHint",
        "argstr": "c: Card, type: number, value: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "type",
            "type": "number"
          },
          {
            "id": "value",
            "type": "number"
          }
        ],
        "desc": "Sets a card (Card c) hint displaying, type is CHINT_* and value is the appropriate value depending on the type"
      },
      {
        "id": "ReverseInDeck",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Reverse a card (Card c) in Deck (make it face-up)"
      },
      {
        "id": "SetUniqueOnField",
        "argstr": "c: Card, s: number, o: number, unique_code: number[, unique_location: number=LOCATION_ONFIELD]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "unique_code",
            "type": "number"
          },
          {
            "id": "unique_location",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sets a card's (Card c) \"Can only control 1\" clause, int s denotes checking of the would-be owner's field, int o denotes checking the opposing field. unique_location denotes the location the card is unique (setting location outside the field has no meaning)"
      },
      {
        "id": "CheckUniqueOnField",
        "argstr": "c: Card, check_player: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "check_player",
            "type": "number"
          }
        ],
        "desc": "Checks if a card's (Card c) going to a player's (int player) field would violate the \"Can only control 1\" clause",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ResetNegateEffect",
        "argstr": "c: Card[, code1: number, ...]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code1",
            "type": "number",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Reset a card c affected by the effect of cards whose card number is code1, code2 ..."
      },
      {
        "id": "AssumeProperty",
        "argstr": "c: Card, assume_type: number, assume_value: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "assume_type",
            "type": "number"
          },
          {
            "id": "assume_value",
            "type": "number"
          }
        ],
        "desc": "Assume a property for a card (Card c), the card will be considered as having an assumed specific property (int assume_type) as the inputted value (int assume_value) (only as long as the function is still processing)"
      },
      {
        "id": "SetSPSummonOnce",
        "argstr": "c: Card, spsummon_code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "spsummon_code",
            "type": "number"
          }
        ],
        "desc": "Make a card (Card c) can only be Special Summoned when the turn has not Special Summoned another card with the same code (int code) as its Card.SetSpecialSummonOnce. Basically, makes the \"You can only Special Summon \"Some Monster\" once per turn\" condition"
      },
      {
        "id": "Code",
        "argstr": "c: Card[, code: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original card name if (int code) is inputted, else returns the current original card name.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Alias",
        "argstr": "c: Card[, code: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s alias if (int code) is inputted, else returns the current card's alias.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Setcode",
        "argstr": "c: Card[, setcode: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "setcode",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original archetype(s)/setcode(s) if (int setcode) is inputted, else returns the current card's original archetype(s)/setcode(s).",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Type",
        "argstr": "c: Card[, type: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "type",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original type(s) if (int type) is inputted, else returns the current card's original type(s).",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Level",
        "argstr": "c: Card[, level: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "level",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original level if (int level) is inputted, else returns the current card's original level",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Attribute",
        "argstr": "c: Card[, att: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "att",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original attribute(s) if (int att) is inputed, else returns the current card's original attribute(s).",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Race",
        "argstr": "c: Card[, race: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "race",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original monster type(s)/race(s) if (int race) is inputed, else returns the current card's original monster type(s)/race(s).",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Attack",
        "argstr": "c: Card[, val: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "val",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original ATK if (int val) is inputted, else returns the current card's original ATK.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Defense",
        "argstr": "c: Card[, val: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "val",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original DEF if (int val) is inputted, else returns the current card's original DEF.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Rscale",
        "argstr": "c: Card[, scale: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "scale",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original left scale if (int scale) is inputted, else returns the current card's original left scale.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Lscale",
        "argstr": "c: Card[, scale: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "scale",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original right scale if (int scale) is inputted, else returns the current card's original right scale.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "LinkMarker",
        "argstr": "c: Card[, linkmarker: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "linkmarker",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes (Card c)'s original Link Markers if (int linkmarker) is inputted, else returns the current card's original Link Markers.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "Recreate",
        "argstr": "c: Card, code: number[, alias: number|nil, setcode: number|nil, type: number|nil, level: number|nil, attribute: number|nil, race: number|nil, atk: number|nil, def: number|nil, lscale: number|nil, rscale: number|nil, replace_effect: boolean|nil=false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "alias",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "setcode",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "type",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "level",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "attribute",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "race",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "atk",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "def",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "lscale",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "rscale",
            "type": "number|nil",
            "opt": true
          },
          {
            "id": "replace_effect",
            "type": "boolean|nil",
            "opt": true
          }
        ],
        "desc": "Changes (Card c) into a card with (int code) as its original card number from the database. If any of the parameters are included, that stat is also changed. If (bool replace_effect) is set to true, its effect also changes to the effects of (int code)."
      },
      {
        "id": "IsExtraLinked",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card is Extra Linked, uses aux.ExtraLinked which obtains 2 Extra Monster Zone monsters of each player and checks if (Card c) is included in the chain of co-linked cards.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsColumn",
        "argstr": "c: Card, seq: number, tp: number, loc: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "seq",
            "type": "number"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "loc",
            "type": "number"
          }
        ],
        "desc": "Checks (Card c) its column using the data of another card which allows checking even if the other card has already left the field using its Sequence (int seq), controller (int tp) and location (int loc)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsReincarnationSummoned",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Interacts with the functions for \"Salamangreat\" Reincarnation procedure. Returns if card c has CARD_SALAMANGREAT_SANCTUARY as FlagEffect",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsNonEffectMonster",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns if (Card c) is a Monster and does not have TYPE_EFFECT",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "HasLevel",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns if a Card (Card c) has a level, which means it must match these criteria: not have TYPE_LINK, not have STAUS_NO_LEVEL, not be an Xyz, unless it is an Xyz that has EFFECT_RANK_LEVEL or EFFECT_RANK_LEVEL_S. A native check for TYPE_MONSTER was not included",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSequence",
        "argstr": "c, ...",
        "args": [
          {
            "id": "c",
            "type": ""
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Returns if a Card (Card c) is located at any of the sequences passed as arguments",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsInMainMZone",
        "argstr": "c: Card, tp: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Return if (Card c) is in a Main Monster Zone. If (int tp) is provided, also returns if (Card c) is of that controller.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsInExtraMZone",
        "argstr": "c: Card, tp: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Return if (Card c) is in an Extra Monster Zone. If (int tp) is provided, also returns if (Card c) is of that controller.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRitualMonster",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns if (Card c) is a Ritual Monster.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsRitualSpell",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Returns if (Card c) is a Ritual Spell.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOriginalCode",
        "argstr": "c: Card, cd: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "cd",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) has original card name of (int cd)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOriginalCodeRule",
        "argstr": "c: Card, cd: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "cd",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) has original code rule of (int cd)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOriginalType",
        "argstr": "c: Card, val: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "val",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) is of original card type (int val)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOriginalAttribute",
        "argstr": "c: Card, val: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "val",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) is of original attribute (int val)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsOriginalRace",
        "argstr": "c: Card, val: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "val",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) is of original monster type (int val)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSummonPlayer",
        "argstr": "c: Card, tp: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) is summoned by player (int tp)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPreviousControler",
        "argstr": "c: Card, tp: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) is previous controlled by player (int tp)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsSummonLocation",
        "argstr": "c: Card, loc: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "loc",
            "type": "number"
          }
        ],
        "desc": "Checks if (Card c) is summoned from location (int loc)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetMetatable",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "",
        "ret": [
          "table"
        ]
      },
      {
        "id": "IsLinkMonster",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "Returns if Card C is a Link Monster. This function was added due to the introduction of Link Spells that makes checking only for IsType==TYPE_LINK not accurate depending on the effect used.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsLinkSpell",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "Returns if Card C is a Link Spell.",
        "ret": [
          "boolean"
        ]
      }
    ]
  },
  {
    "cls": "Effect",
    "infer": "e",
    "methods": [
      {
        "id": "CheckCountLimit",
        "argstr": "",
        "args": [],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CreateEffect",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Create a new effect object with a card (Card c) as it's owner",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "UseCountLimit",
        "desc": ""
      },
      {
        "id": "GlobalEffect",
        "argstr": "",
        "args": [],
        "desc": "Create a new effect object without owner",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "Clone",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Clone an effect object (Effect e), duplicating all except register status and assigned labels",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "Reset",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Reset an effect (Effect e), effectively deleting it"
      },
      {
        "id": "GetFieldID",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets a unique ID representing a certain instance of an effect.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SetDescription",
        "argstr": "e: Effect, desc: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "desc",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) description string id with (int desc) taken from cdb and strings.conf (description in cdb is [cardnumber *16+index], aux.Stringid is a shortcut)."
      },
      {
        "id": "SetCategory",
        "argstr": "e: Effect, cate: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "cate",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) category. Refer to constant.lua for valid categories."
      },
      {
        "id": "SetType",
        "argstr": "e: Effect, type: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "type",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) type. Refer to constant.lua and card scripts that has been already there for valid types (or ask someone)."
      },
      {
        "id": "SetCode",
        "argstr": "e: Effect, code: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) code. Refer to constant.lua and card scripts that has been already there for valid codes (or ask someone)."
      },
      {
        "id": "SetProperty",
        "argstr": "e: Effect, prop1: number[, prop2: number]",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "prop1",
            "type": "number"
          },
          {
            "id": "prop2",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sets an effect's (Effect e) property. Refer to constant.lua and card scripts that has been already there for valid properties (or ask someone)."
      },
      {
        "id": "SetRange",
        "argstr": "e: Effect, range: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "range",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) effective range (int range) i.e. LOCATION_MZONE. The location is the effect handler's location."
      },
      {
        "id": "SetAbsoluteRange",
        "argstr": "e: Effect, playerid: number, s_range: number, o_range: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "playerid",
            "type": "number"
          },
          {
            "id": "s_range",
            "type": "number"
          },
          {
            "id": "o_range",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) target range in perspective of the supplied player (int playerid), s_range denotes the supplied player's range and o_range denotes the opponent's."
      },
      {
        "id": "SetCountLimit",
        "argstr": "e: Effect, count: number[, code: number=0]",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sets an effect's (Effect e) use limit per turn to (int count), if code is supplied, then it would count toward all effects with the same count limit code (i.e. Hard OPT)"
      },
      {
        "id": "SetReset",
        "argstr": "e: Effect, reset_flag: number[, reset_count: number=1]",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "reset_flag",
            "type": "number"
          },
          {
            "id": "reset_count",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sets the timing that the effect (Effect e) would be erased (with reset_flag)"
      },
      {
        "id": "SetLabel",
        "argstr": "e: Effect, label: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "label",
            "type": "number"
          }
        ],
        "desc": "Sets an effect's (Effect e) internal label to (int label)"
      },
      {
        "id": "SetLabelObject",
        "argstr": "e: Effect, labelobject: Card|Group|Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "labelobject",
            "type": "Card|Group|Effect"
          }
        ],
        "desc": "Sets an effect's (Effect e) internal label object to labelobject"
      },
      {
        "id": "SetHintTiming",
        "argstr": "e: Effect, s_time: number[, o_time: number=s_time]",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "s_time",
            "type": "number"
          },
          {
            "id": "o_time",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sets an activated (Effect e)'s client usage hint timing"
      },
      {
        "id": "SetCondition",
        "argstr": "e: Effect, con_func: function",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "con_func",
            "type": "function"
          }
        ],
        "desc": "Sets (Effect e)'s condition function"
      },
      {
        "id": "SetCost",
        "argstr": "e: Effect, cost_func: function",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "cost_func",
            "type": "function"
          }
        ],
        "desc": "Sets (Effect e)'s cost function"
      },
      {
        "id": "SetTarget",
        "argstr": "e: Effect, targ_func: function",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "targ_func",
            "type": "function"
          }
        ],
        "desc": "Sets (Effect e)'s target function"
      },
      {
        "id": "SetTargetRange",
        "argstr": "e: Effect, s_range: number, o_range: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "s_range",
            "type": "number"
          },
          {
            "id": "o_range",
            "type": "number"
          }
        ],
        "desc": "Sets (Effect e)'s target range, s_range denotes the effect's handler player's range and o_range denotes the opponent's."
      },
      {
        "id": "SetValue",
        "argstr": "e: Effect, val: function|number|boolean",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "val",
            "type": "function|number|boolean"
          }
        ],
        "desc": "Sets (Effect e)'s value, or value function"
      },
      {
        "id": "SetOperation",
        "argstr": "e: Effect, op_func: function",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "op_func",
            "type": "function"
          }
        ],
        "desc": "Sets (Effect e)'s operation function"
      },
      {
        "id": "SetOwnerPlayer",
        "argstr": "e: Effect[, player: number]",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sets (Effect e)'s owner player (the [int player] is actually not optional)"
      },
      {
        "id": "GetDescription",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets (Effect e)'s assigned description string id",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetCode",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets (Effect e)'s code",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetCountLimit",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Get (Effect e)'s remaining, and maximum count limit, and any code parameter (e.g. detect \"The effect of \"card name\" can only be used once per turn.)",
        "ret": [
          "number",
          "number",
          "number"
        ]
      },
      {
        "id": "GetReset",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets (Effect e)'s reset flag and reset count.",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "GetType",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) type",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetProperty",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) property",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "GetLabel",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) internal label",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLabelObject",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) internal label object",
        "ret": [
          "Card|Group|Effect"
        ]
      },
      {
        "id": "GetCategory",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) category",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOwner",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) card owner, if the owner is not a card (GlobalEffect) then returns nil",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetHandler",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) card handler, if the effect is not attached to a card (i.e. registered to player) it returns nil",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetCondition",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) condition function, returns nil if no function was set",
        "ret": [
          "function"
        ]
      },
      {
        "id": "GetTarget",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) target function, returns nil if no function was set",
        "ret": [
          "function"
        ]
      },
      {
        "id": "GetCost",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) cost function, returns nil if no function was set",
        "ret": [
          "function"
        ]
      },
      {
        "id": "GetValue",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) value or value function, returns nil if no function was set",
        "ret": [
          "function|number"
        ]
      },
      {
        "id": "GetOperation",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) operation function, returns nil if no function was set",
        "ret": [
          "function"
        ]
      },
      {
        "id": "GetActiveType",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) card type of activation effect. Activation type is often the effect handler's card type, or the owner's if not attached to a card. Exception for Pendulum scale activation (would return TYPE_SPELL+TYPE_PENDULUM).",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsActiveType",
        "argstr": "e: Effect, type: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "type",
            "type": "number"
          }
        ],
        "desc": "Compares (with OR) an effect's (Effect e) card type of activation effect with supplied type (int type). Activation type is often the handler's card type, or the owner's if not attached to a card. Exception for Pendulum scale activation (would return TYPE_SPELL+TYPE_PENDULUM).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetOwnerPlayer",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) owner player",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetHandlerPlayer",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Gets an effect's (Effect e) handler player",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsHasProperty",
        "argstr": "e: Effect, prop1: number[, prop2: number]",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "prop1",
            "type": "number"
          },
          {
            "id": "prop2",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns true if the effect (Effect e) has any property listed in (int prop1) or (int prop2), otherwise returns false",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsHasCategory",
        "argstr": "e: Effect, cate: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "cate",
            "type": "number"
          }
        ],
        "desc": "Returns true if the effect (Effect e) has any category listed in (int cate), otherwise returns false",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsHasType",
        "argstr": "e: Effect, type: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "type",
            "type": "number"
          }
        ],
        "desc": "Returns true if the effect (Effect e) has any type listed in (int type), otherwise returns false",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsActivatable",
        "argstr": "e: Effect, player: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Checks if an effect (Effect e) can be activated by a player (int player)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsActivated",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Checks if an effect (Effect e) is an activated effect (not continuous and is a triggering effect)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetActivateLocation",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Get the effect's (Effect e) applicable range (gets it's s_range)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetActivateSequence",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Get (Effect e)'s sequence when it was activated.",
        "ret": [
          "number"
        ]
      }
    ]
  },
  {
    "cls": "Group",
    "infer": "g",
    "methods": [
      {
        "id": "CreateGroup",
        "argstr": "",
        "args": [],
        "desc": "Create a new Group object",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "KeepAlive",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Make a group (Group g) not be destroyed upon exiting the function"
      },
      {
        "id": "DeleteGroup",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Destroy a group (Group g)"
      },
      {
        "id": "Clone",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Create a copy of a group (Group g) with the same members",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "FromCards",
        "argstr": "c: Card[, ...]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Create a new Group object and populate it with cards (Card c, ...)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "Clear",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Empty a group (Group g)"
      },
      {
        "id": "AddCard",
        "argstr": "g: Group, c: Card",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Add a card (Card c) to a group (Group g)"
      },
      {
        "id": "RemoveCard",
        "argstr": "g: Group, c: Card",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Remove a card (Card c) from a group (Group g)"
      },
      {
        "id": "GetFirst",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Gets the first member of Group g (also resets the internal enumerator)",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetNext",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Gets then next member of Group g (moves the internal enumerator by a step)",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "TakeatPos",
        "argstr": "g: Group, pos: number",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "pos",
            "type": "number"
          }
        ],
        "desc": "return a new group made of cards that are only in the position specified (int pos)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetCount",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Gets the amount of objects in a group (Group g)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ForEach",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Executes a function for each card in a group (Group g), function f should accept one parameter (e.g. f(c, ...), with c as each member of the group and ... can be any number of parameters)"
      },
      {
        "id": "Filter",
        "argstr": "g: Group, f: function, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Create a new group with members from another group (Group g) filtered according to a function (function f). Excludes a card/group (Group/Card ex) if not nil. Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the card will be included if f(c,...) returns true.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "FilterCount",
        "argstr": "g: Group, f: function, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Counts the amount of members of a group (Group g) which meets the function (function f). Excludes a card (Card ex) if not nil. Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the card will be included if f(c,...) returns true.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "FilterSelect",
        "argstr": "g: Group, player: number, f: function, min: number, max: number[, cancelable: boolean=false], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "cancelable",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Make a player (int player) select members of a group (Group g) which meets the function (function f), with a minimum and a maximum, then outputs the result as a new Group. Excludes a card (Card ex) if not nil. Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the card will be included if f(c,...) returns true. If cancelable is true and the selection is canceled nil will be returned.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "Select",
        "argstr": "g: Group, player: number, min: number, max: number[, cancelable: boolean=false] Group|Card ex|nil",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "cancelable",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Make a player (int player) select members of a group (Group g), with a minimum and a maximum, then outputs the result as a new Group. Excludes a card (Card ex) if not nil. If cancelable is true and the selection is canceled nil will be returned.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "SelectUnselect",
        "argstr": "g1: Group, g2: Group, player: number[, finishable: boolean, cancelable: boolean, min: number, max: number]",
        "args": [
          {
            "id": "g1",
            "type": "Group"
          },
          {
            "id": "g2",
            "type": "Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "finishable",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "cancelable",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Selects cards in a loop that allows unselection/cancellation. (Group g1) is the group of not selected cards, (Group g2) is the group of already selected cards, (int player) is the player who selects the card, (bool finishable) indicates that the current selection has met the requirements and thus can be finished with the right click, (bool cancelable) indicates that the selection can be canceled with the right click (in the procedures this is set when the selected group is empty and no chain is going on), (int max) and (int min) does nothing to the function, they are only the max and min values shown in the hint. Every card in both the groups can be selected. The function returns a single card",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "RandomSelect",
        "argstr": "g: Group, player: number, count: number",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Make a player (int player) randomly select (int amount) members of a group (Group g).",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "IsExists",
        "argstr": "g: Group, f: function, count: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Checks if at least a number (int count) of members of a group (Group g) meet the function (function f). Excludes a card (Card ex) if not nil. Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the card will be included if f(c,...) returns true.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckWithSumEqual",
        "argstr": "g: Group, f: function, sum: number, min: number, max: number, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "sum",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Checks if there is a combination of cards, with a minimum and maximum, that has the sum of f(c,...) result equal to (int sum) in a group (Group g). Function f accepts at least one parameter (f(c,...). with c as each member of the group), and the return value should be integer.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectWithSumEqual",
        "argstr": "g: Group, player: number, f: function, sum: number, min: number, max: number, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "sum",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Makes a player (int player) select members of a group (Group g) which results in a combination of cards, with a minimum and maximum, that has the sum of f(c,...) result equal to (int sum). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "CheckWithSumGreater",
        "argstr": "g: Group, f: function, sum: number, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "sum",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Checks if there is a combination of cards, with a minimum and maximum, that has the sum of f(c,...) result greater than or equal to (int sum) in a group (Group g). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectWithSumGreater",
        "argstr": "g: Group, player: number, f: function, sum: number, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "sum",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Makes a player (int player) select members of a group (Group g) which results in a combination of cards, with a minimum and maximum, that has the sum of f(c,...) result greater than or equal to (int sum). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetMinGroup",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Create a new group with members from another group (Group g) which has the minimum result from f(c,...). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer, if the group g have no element, that function will return nil.",
        "ret": [
          "Group",
          "number/nil"
        ]
      },
      {
        "id": "GetMaxGroup",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Create a new group with members from another group (Group g) which has the maximum result from f(c,...). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer, if the group g have no element, that function will return nil.",
        "ret": [
          "Group",
          "number/nil"
        ]
      },
      {
        "id": "GetSum",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Gets the sum of f(c,...) result from all members of a group (Group g). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetClassCount",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Gets the count of different f(c,...) results from all members of a group (Group g). Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the return value should be integer.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Remove",
        "argstr": "g: Group, f: function, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Removes members of a group (Group g) that meets the function (function f). Excludes a card (Card ex) from removal if not nil. Function f accepts at least one parameter (f(c,...), with c as each member of the group), and the card will be included if f(c,...) returns true."
      },
      {
        "id": "Merge",
        "argstr": "g1: Group, g2: Group",
        "args": [
          {
            "id": "g1",
            "type": "Group"
          },
          {
            "id": "g2",
            "type": "Group"
          }
        ],
        "desc": "Inserts members of the second group (Group g2) to the first group (Group g1). (This will alter g1)"
      },
      {
        "id": "Sub",
        "argstr": "g1: Group, g2: Group",
        "args": [
          {
            "id": "g1",
            "type": "Group"
          },
          {
            "id": "g2",
            "type": "Group"
          }
        ],
        "desc": "Removes members of the second group (Group g2) from the first group (Group g1). (This will alter g1)"
      },
      {
        "id": "Equal",
        "argstr": "g1: Group, g2: Group",
        "args": [
          {
            "id": "g1",
            "type": "Group"
          },
          {
            "id": "g2",
            "type": "Group"
          }
        ],
        "desc": "Checks if the first group (Group g1) has the same members with the second group (Group g2)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsContains",
        "argstr": "g: Group, c: Card",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a group (Group g) contains a specified card (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SearchCard",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Gets the first card found in a group (Group g) which f(c,...) returns true. Function f accepts at least one parameter (f(c,...), with c as each member of the group), and must return a boolean.",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "Split",
        "argstr": "g: Group, f: function, ...",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "split group g into 2 groups, first is card that match the function f and the second one are the other cards.",
        "ret": [
          "Group",
          "Group"
        ]
      },
      {
        "id": "Includes",
        "argstr": "g1: Group, g2: Group",
        "args": [
          {
            "id": "g1",
            "type": "Group"
          },
          {
            "id": "g2",
            "type": "Group"
          }
        ],
        "desc": "Checks if (Group g1) contains all cards in (Group g2)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckSameProperty",
        "argstr": "g, f, ...",
        "args": [
          {
            "id": "g",
            "type": ""
          },
          {
            "id": "f",
            "type": ""
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Returns if the members of (Group  g) share a same property, provided in (Function f)",
        "ret": [
          "boolean"
        ]
      }
    ]
  },
  {
    "cls": "Duel",
    "methods": [
      {
        "id": "GetZoneWithLinkedCount",
        "argstr": "count: number, tp: number",
        "args": [
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Returns the zones that belong to player \"tp\" and are pointed to by at least \"count\" Link Monsters.\n",
        "ret": [
          "number"
        ]
      },
      {
        "id": "EnableGlobalFlag",
        "argstr": "global_flag: number",
        "args": [
          {
            "id": "global_flag",
            "type": "number"
          }
        ],
        "desc": "Enables the specified global flags (int global_flag) for the rest of the Duel (GLOBALFLAG_x)."
      },
      {
        "id": "GetLP",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Gets a specified player's (int player) current Life Point value",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SetLP",
        "argstr": "player: number, lp: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "lp",
            "type": "number"
          }
        ],
        "desc": "Sets a specified player's (int player) current Life Point value to a value (int lp)"
      },
      {
        "id": "GetTurnPlayer",
        "argstr": "",
        "args": [],
        "desc": "Gets the turn's player",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetTurnCount",
        "argstr": "",
        "args": [],
        "desc": "Gets the turn count",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetDrawCount",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Gets the draw count for normal draw for a player (int player)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "RegisterEffect",
        "argstr": "e: Effect, player: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Register an effect (Effect e) to a player (int player)"
      },
      {
        "id": "RegisterFlagEffect",
        "argstr": "player: number, code: number, reset_flag: number, property: number, reset_count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "reset_flag",
            "type": "number"
          },
          {
            "id": "property",
            "type": "number"
          },
          {
            "id": "reset_count",
            "type": "number"
          }
        ],
        "desc": "Registers a flag effect to a player (int player) with (int code) as the effect code",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "GetFlagEffect",
        "argstr": "player: number, code: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Gets the flag effect with (int code) as the effect code that is registered to a player (int player), returns 0 if no effect, a positive integer otherwise",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ResetFlagEffect",
        "argstr": "player: number, code: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Resets a flag with (int code) as the effect code from a player (int player)"
      },
      {
        "id": "Destroy",
        "argstr": "targets: Card|Group, reason: number[ , dest: number = LOCATION_GRAVE]",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "dest",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Destroys a card or group (Card|Group targets) with (int reason) as reason, if (int dest) is supplied, the destination of the destroyed cards will be it's value. Returns the number of cards successfully destroyed.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Remove",
        "argstr": "targets: Card|Group, pos: number, reason: number[, player: number]",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "pos",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Banishes a card or group (Card|Group targets) in position as supplied by (int pos) (nil means default banish position), with (int reason) as reason, if (int player) is supplied, the destination would be that player's zone. Returns the number of cards successfully banished.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "RemoveCards",
        "desc": ""
      },
      {
        "id": "SendtoGrave",
        "argstr": "targets: Card|Group, reason: number[, player: number]",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sends a card or group (Card|Group targets) to the Graveyard with (int reason) as reason, if (int player) is supplied, the destination would be that player's Graveyard. Returns the number of cards successfully sent.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SendtoHand",
        "argstr": "targets: Card|Group, player: number|nil, reason: number",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "player",
            "type": "number|nil"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Sends a card or group (Card|Group targets) to the Hand with (int reason) as reason, if (int player) is supplied, the destination would be that player's Hand. Returns the number of cards successfully sent.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SendtoDeck",
        "argstr": "targets: Card|Group, player: number|nil, seq: number, reason: number",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "player",
            "type": "number|nil"
          },
          {
            "id": "seq",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Sends a card or group (Card|Group targets) to the Deck with (int reason) as reason, if (int player) is supplied, the destination would be that player's Deck. A seq value of 0 means it's put on the top, 1 means it's put on the bottom, other values means it's put on the top, and the Deck will be shuffled after the function resolution except if Duel.DisableShuffleCheck() is set to true beforehand. Returns the number of cards successfully sent.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SendtoExtraP",
        "argstr": "targets: Card|Group, player: number|nil, reason: number",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "player",
            "type": "number|nil"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Sends a card or group (Card|Group targets) to the Extra Deck face-up with (int reason) as reason, if (int player) is supplied, the destination would be that player's Extra Deck (for Pendulum monsters only). Returns the number of cards successfully sent.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Sendto",
        "argstr": "p: Card|Grou, location: number, reason: number, [pos: number=POS_FACEUP, player: number=PLAYER_NONE, sequence: number=0]",
        "args": [
          {
            "id": "p",
            "type": "Card|Grou"
          },
          {
            "id": "location",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "pos",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          },
          {
            "id": "sequence",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Sends a card or group (Card|Group targets) to the location (int location) with (int reason) as reason in (ins pos) position (only applies in Extra Deck and Banish). If (int player) is supplied, the destination would be that player's location. A seq value of 0 means it's put on the top, 1 means it's put on the bottom, other values means it's put on the top, and the if it is Deck, it will be shuffled after the function resolution except if Duel.DisableShuffleCheck() is set to true beforehand. Returns the number of cards successfully sent.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetOperatedGroup",
        "argstr": "",
        "args": [],
        "desc": "Gets the last group of operated cards (from last call of some functions, ex. calling this after Duel.Draw would return a group of the drawn cards)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "Summon",
        "argstr": "player: number, c: Card, ignore_count: boolean, e: Effect|nil[, n: mi=0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ignore_count",
            "type": "boolean"
          },
          {
            "id": "e",
            "type": "Effect|nil"
          },
          {
            "id": "n",
            "type": "mi",
            "opt": true
          }
        ],
        "desc": "Makes a player (int player) Normal Summons a card (Card c) using the Normal Summon procedure that the card has. If (ignore_count) is set to true, the Summon would not count towards the standard limit of Normal Summon/Set. If an effect (Effect e) is provided, the Normal Summon is counted as a Summon by that effect. If (min) is greater than 0, the Summon proc must need that amount or more tributes."
      },
      {
        "id": "SpecialSummonRule",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "A player (int player) Special Summons a card (Card c) using Special Summon proc that the card has"
      },
      {
        "id": "SynchroSummon",
        "argstr": "player: number, c: Card[, must_use: Group|Card|nil, mg: Group|Card|nil, minc: number=0, maxc: number=0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "must_use",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "minc",
            "type": "number",
            "opt": true
          },
          {
            "id": "maxc",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "A player (int player) Synchro Summons a card (Card c) using \"must_use\" as part of its materials, choosing among \"mg\", with \"min\" and \"max\" materials to be used for the Summon"
      },
      {
        "id": "XyzSummon",
        "argstr": "player: number, c: Card[, must_use: Group|Card|nil, mg: Group|Card|nil, minc: number=0, maxc: number=0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "must_use",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "minc",
            "type": "number",
            "opt": true
          },
          {
            "id": "maxc",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "A player (int player) Xyz Summons a card (Card c) using \"must_use\" as part of its materials, choosing among \"mg\", with \"min\" and \"max\" materials to be used for the Summon"
      },
      {
        "id": "LinkSummon",
        "argstr": "player: number, c: Card[, must_use: Group|Card|nil, mg: Group|Card|nil, minc: number=0, maxc: number=0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "must_use",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "minc",
            "type": "number",
            "opt": true
          },
          {
            "id": "maxc",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "A player (int player) Link Summons a card (Card c) using \"must_use\" as part of its materials, choosing among \"mg\", with \"min\" and \"max\" materials to be used for the Summon."
      },
      {
        "id": "LoadScript ",
        "argstr": "file_name: string",
        "args": [
          {
            "id": "file_name",
            "type": "string"
          }
        ],
        "desc": "Loads into the current enviroment (duel/puzzle) (file_name)'s script."
      },
      {
        "id": "LoadCardScript",
        "argstr": "code: string|number",
        "args": [
          {
            "id": "code",
            "type": "string|number"
          }
        ],
        "desc": "Loads into the current enviroment (duel/puzzle) the script from card which id is int code. If a string is used, it must be \"c'code'.lua\""
      },
      {
        "id": "MSet",
        "argstr": "player: number, c: Card, ignore_count: boolean, e: Effect|nil[, n: mi=0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ignore_count",
            "type": "boolean"
          },
          {
            "id": "e",
            "type": "Effect|nil"
          },
          {
            "id": "n",
            "type": "mi",
            "opt": true
          }
        ],
        "desc": "A player Sets a card (Card c) using Normal Summon proc that the card has. if ignore_count is true, the Set would not count towards the standard limit of Normal Summon/Set. If an effect (Effect e) is provided, the Normal Set is counted as a Set by that effect. if min>0 then the Set proc must need that amount or more tributes."
      },
      {
        "id": "SSet",
        "argstr": "player: number, targets: Card|Group[, target_player: number = player, show: boolean]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "target_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "show",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "A player Sets a card/cards (Card|Group target) to the Spell/Trap Card Zone. If target_player is provided, then the player will Set the card to that target player's field, if bool show is set to false, the card set is not revealed - for confirmation - to the opponent.",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "CreateToken",
        "argstr": "player: number, code: number[, setcode: number, attack: number, defense: number, level: number, race: number, attribute: number]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "setcode",
            "type": "number",
            "opt": true
          },
          {
            "id": "attack",
            "type": "number",
            "opt": true
          },
          {
            "id": "defense",
            "type": "number",
            "opt": true
          },
          {
            "id": "level",
            "type": "number",
            "opt": true
          },
          {
            "id": "race",
            "type": "number",
            "opt": true
          },
          {
            "id": "attribute",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Create a token for a player (int player) with card code (int code)",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "SpecialSummon",
        "argstr": "targets: Card|Group, sumtype: number, sumplayer: number, target_player: number, nocheck: boolean, nolimit: boolean, pos: number",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "sumtype",
            "type": "number"
          },
          {
            "id": "sumplayer",
            "type": "number"
          },
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "nocheck",
            "type": "boolean"
          },
          {
            "id": "nolimit",
            "type": "boolean"
          },
          {
            "id": "pos",
            "type": "number"
          }
        ],
        "desc": "A player (int sumplayer) Special Summons a card/group of cards (Card|Group targets) with summon type described with SUMMON_TYPE_x (int sumtype) to a player's (int target_player) field. Returns the number of cards successfully summoned.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SpecialSummonStep",
        "argstr": "c: Card, sumtype: number, sumplayer: number, target_player: number, nocheck: boolean, nolimit: boolean, pos: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sumtype",
            "type": "number"
          },
          {
            "id": "sumplayer",
            "type": "number"
          },
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "nocheck",
            "type": "boolean"
          },
          {
            "id": "nolimit",
            "type": "boolean"
          },
          {
            "id": "pos",
            "type": "number"
          }
        ],
        "desc": "A player (int sumplayer) Special Summons a card (Card c) with summon type described with SUMMON_TYPE_x (int sumtype) to a player's (int target_player) field.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SpecialSummonComplete",
        "argstr": "",
        "args": [],
        "desc": "Completes Special Summons conducted with Duel.SpecialSummonStep",
        "ret": [
          "void|number"
        ]
      },
      {
        "id": "IsCanAddCounter",
        "argstr": "player: number, countertype: number, count: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks whether a player (int player) can add a number (int count) of counters (int countertype) to a card (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsDuelType",
        "argstr": "flag: number",
        "args": [
          {
            "id": "flag",
            "type": "number"
          }
        ],
        "desc": "Check if the current duel is of the current flag (ex: using DUEL_OBSOLETE_RULING will check if it obsolete rulings)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RemoveCounter",
        "argstr": "player: number, s: number, o: number, countertype: number, count: number, reason: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Makes a player (int player) remove counter(s) (int countertype) (int count) from the field with a reason (int reason). The variables int s and int o are the player's and the opponent's field, respectively, 0 to exclude and 1 (or higher) to include.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCanRemoveCounter",
        "argstr": "player: number, s: number, o: number, countertype: number, count: number, reason: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "countertype",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Checks if a player (int player) can remove counter(s) (int countertype) (int count) from the field with a reason (int reason). The variables int s and int o are the player's and the opponent's field, respectively, 0 to exclude and 1 (or higher) to include.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetCounter",
        "argstr": "player: number, s: number, o: number, countertype: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "countertype",
            "type": "number"
          }
        ],
        "desc": "Gets the number of counter (int countertype) on the field, from a player's (int player) perspective. The variables int s and int o are the player's and the opponent's field, respectively, 0 to exclude and 1 (or higher) to include.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ChangePosition",
        "argstr": "targets: Card|Group, au: number[, ad: number=au, du: number=au, dd: number=au, noflip: boolean=false]",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "au",
            "type": "number"
          },
          {
            "id": "ad",
            "type": "number",
            "opt": true
          },
          {
            "id": "du",
            "type": "number",
            "opt": true
          },
          {
            "id": "dd",
            "type": "number",
            "opt": true
          },
          {
            "id": "noflip",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Changes the battle position of (Card|Group targets). (int au), (int ad), int (du) and (int dd) are the positions cards in face-up attack, face-down attack, face-up defense, and face-down defense positions will be changed to, respectively. If (bool noflip) is true, FLIP effects will not be activated by this change. Returns the number of cards successfully affected.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Release",
        "argstr": "targets: Card|Group, reason: number",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Tribute a card(s) (Card|Group targets) with listed reason (int reason). Returns the number of cards successfully Tributed.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "MoveToField",
        "argstr": "c: Card, move_player: number, target_player: number, dest: number, pos: number, enabled: boolean, zone: number = 0xff",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "move_player",
            "type": "number"
          },
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "dest",
            "type": "number"
          },
          {
            "id": "pos",
            "type": "number"
          },
          {
            "id": "enabled",
            "type": "boolean"
          },
          {
            "id": "zone",
            "type": "number"
          }
        ],
        "desc": "A player (int move_player) moves a card (Card c) to the target player's field. The destination must be either LOCATION_MZONE or LOCATION_SZONE (maybe LOCATION_ONFIELD too). It will be sent with the given position (int pos). Its effects will either be enabled or disabled according to the last parameter (bool enabled), if zone is specified, it can only place the card in these zones.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ReturnToField",
        "argstr": "c: Card[, pos: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "pos",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Return a card (Card c) to the field (only valid for cards that leaves the field with REASON_TEMPORARY, pos denotes the return position (if not specified, uses the card's previous position on field)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "MoveSequence",
        "argstr": "c: Card, seq: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "seq",
            "type": "number"
          }
        ],
        "desc": "Move a card (Card c) to another sequence within its location (int seq)"
      },
      {
        "id": "SetChainLimit",
        "argstr": "f: function",
        "args": [
          {
            "id": "f",
            "type": "function"
          }
        ],
        "desc": "Sets a function for limiting effects that could chain from this point in the chain, removed when an effect is chained to the current chain. Function f accepts at most 3 parameters [f(e,tp,p)] in which e is the effect that would be chained, tp is the same tp from the effect function where this function is called , and p is the player who would activate the would-be chaining effect."
      },
      {
        "id": "SetChainLimitTillChainEnd",
        "argstr": "f: function",
        "args": [
          {
            "id": "f",
            "type": "function"
          }
        ],
        "desc": "Sets a function for limiting effects that could chain from this point for the chain until the end of the chain. Function f accepts at most 3 parameters [f(e,tp,p)] in which e is the effect that would be chained, tp is the same tp from the effect function where this function is called , and p is the player who would activate the would-be chaining effect."
      },
      {
        "id": "GetChainMaterial",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Gets the EFFECT_CHAIN_MATERIAL field effect that is applied to a player (int player). Would only get the first effect it founds.",
        "ret": [
          "Effect"
        ]
      },
      {
        "id": "ConfirmDecktop",
        "argstr": "player: number, count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Made a number (int count) of cards from the top of a player's (int player) Deck known to both players"
      },
      {
        "id": "ConfirmCards",
        "argstr": "player: number, targets: Card|Group",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "targets",
            "type": "Card|Group"
          }
        ],
        "desc": "Confirm the informations of a card/group of cards (Card|Group targets) to the specified player (int player)"
      },
      {
        "id": "ConfirmExtratop",
        "argstr": "tp: number",
        "args": [
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": ""
      },
      {
        "id": "SortDecktop",
        "argstr": "sort_player: number, target_player: number, count: number",
        "args": [
          {
            "id": "sort_player",
            "type": "number"
          },
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Player (int sort_player) sorts an amount of cards (int count) of a player's (int target_player) decktop"
      },
      {
        "id": "CheckTribute",
        "argstr": "c: card, min: number, max: number, mg: group, tp: number, e: zon",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "group"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "e",
            "type": "zon"
          }
        ],
        "desc": ""
      },
      {
        "id": "CheckEvent",
        "argstr": "event: number[, get_info: boolean]",
        "args": [
          {
            "id": "event",
            "type": "number"
          },
          {
            "id": "get_info",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "",
        "ret": [
          "boolean",
          "Group",
          "number",
          "number",
          "Effect",
          "number",
          "number"
        ]
      },
      {
        "id": "RaiseEvent",
        "argstr": "eg: Group|Card, code: number, re: Effect, r: number, rp: number, ep: number, ev: number",
        "args": [
          {
            "id": "eg",
            "type": "Group|Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          }
        ],
        "desc": "Raises an Event which can for example trigger other Effects with the entered Code"
      },
      {
        "id": "RaiseSingleEvent",
        "argstr": "ec: Card, code: number, re: Effect, r: number, rp: number, ep: number, ev: number",
        "args": [
          {
            "id": "ec",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          }
        ],
        "desc": "Raises an Event which can for example trigger other Effects with the entered Code"
      },
      {
        "id": "CheckTiming",
        "argstr": "timing: number",
        "args": [
          {
            "id": "timing",
            "type": "number"
          }
        ],
        "desc": "Returns true if the current timing is int timing",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetEnvironment",
        "argstr": "",
        "args": [],
        "desc": "Gets the environment code for the applied field card (the same as the Field Spell's code, usually). Returns the code, then the controlling player. Prioritizes the first player.",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "IsEnvironment",
        "argstr": "code: number[, player: number=PLAYER_ALL]",
        "args": [
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if the environment contains a code (int code). If specified, checks only for the player's (int player) side.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "Win",
        "argstr": "player: number, win_reason: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "win_reason",
            "type": "number"
          }
        ],
        "desc": "Player (int player) wins the Duel for a reason (REASON_x)"
      },
      {
        "id": "Draw",
        "argstr": "player: number, count: number, reason: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Player (int player) draws a specific amount (int count) of Cards for a reason (REASON_x)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Damage",
        "argstr": "player: number, value: number, reason: number[, is_step: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "is_step",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Damages/Decreases player's (int player) Life Points by an amount (int value) for a reason (REASON_x). Setting is_step to true made the damage considered dealt at the call of Duel.RDComplete()",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Recover",
        "argstr": "player: number, value: number, reason: number[, is_step: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "is_step",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Increases player's (int player) Life Points by an amount (int value) for a reason (REASON_x). Setting is_step to true made the recovery considered being done at the call of Duel.RDComplete()",
        "ret": [
          "number"
        ]
      },
      {
        "id": "RDComplete",
        "argstr": "",
        "args": [],
        "desc": "Complete Damage/Recover step (for simultaneous damage/recovery)"
      },
      {
        "id": "Equip",
        "argstr": "player: number, c1: Card, c2: Card[, up: boolean=true, is_step: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          },
          {
            "id": "up",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "is_step",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "A Player (int player) equips a Card (Card c1) to another Card (Card c2)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "EquipComplete",
        "argstr": "",
        "args": [],
        "desc": "Concludes a series of Equips (Always used with 'is_step = true' in Duel.Equip())"
      },
      {
        "id": "ForceAttack",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": ""
      },
      {
        "id": "GetCardFromCardID",
        "argstr": "cardid: number",
        "args": [
          {
            "id": "cardid",
            "type": "number"
          }
        ],
        "desc": "Returns the card whose internal id matches cardid, if no card matches, nil is returned.",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetControl",
        "argstr": "targets: Card|Group, player: number[, reset_phase: number=0, reset_count: number=0, zone: number = 0xff]",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "reset_phase",
            "type": "number",
            "opt": true
          },
          {
            "id": "reset_count",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Give control of a card/group (Card|Group targets) to a player (int player). If reset_phase and reset_count is specified, will behave like other effects with those resets (and so, the control will be returned when the effect has expired). Works only for monsters in Monster Zone, if zone is specified, if moves monster to that zones only or destroy if they are full.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetExtraTopGroup",
        "argstr": "tp: number",
        "args": [
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "SwapControl",
        "argstr": "c1: Card, c2: Card[, reset_phase: number=0, reset_count: number=0]",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          },
          {
            "id": "reset_phase",
            "type": "number",
            "opt": true
          },
          {
            "id": "reset_count",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Swaps control of 2 cards (Card c1, Card c2). If reset_phase and reset_count is specified, will behave like other effects with those resets (and so, the control will be returned when the effect has expired). Works only for monsters in Monster Zone.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckLPCost",
        "argstr": "player: number, cost: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "cost",
            "type": "number"
          }
        ],
        "desc": "Checks if a player (int player) can pay an amount (int cost) of LP",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "PayLPCost",
        "argstr": "player: number, cost: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "cost",
            "type": "number"
          }
        ],
        "desc": "Make a player (int player) pay an amount (int cost) of LP"
      },
      {
        "id": "DiscardDeck",
        "argstr": "player: number, count: number, reason: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "A player (int player) sends the top n cards (int count) to the Graveyard (discard mechanic) with a reason (int reason)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "DiscardHand",
        "argstr": "player: number, f: function, min: number, max: number, reason: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Makes (int player) Discard between (int min) and (int max) cards from their hand for which (function f) returns true, except (Group|Card ex), for (int reason)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "DisableShuffleCheck",
        "argstr": "[e: disabl=true]",
        "args": [
          {
            "id": "e",
            "type": "disabl",
            "opt": true
          }
        ],
        "desc": "If disable is true, makes an action that adds/removes a card(s) from/to Deck/hand not trigger the shuffle check at the end of the the current routine execution. Putting false would revert to normal behavior."
      },
      {
        "id": "ShuffleExtra",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Shuffles the Extra Deck of (int player). Must be used after confirming cards in the Extra Deck."
      },
      {
        "id": "ShuffleDeck",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Shuffles the deck of (int player). Handled automatically if a card is sent to deck sequence -2."
      },
      {
        "id": "ShuffleHand",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Shuffles the hand of (int player). Handled automatically after Duel.ConfirmCards()."
      },
      {
        "id": "ShuffleSetCard",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Shuffles the set cards in (Group g). (Shifting Shadows)"
      },
      {
        "id": "ChangeAttacker",
        "argstr": "c: Card[, ign: number = false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "ign",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Changes the current monster attacking to another card (Card c), if ignore counts is set to true (int ign) it will ignore if the card can still attack."
      },
      {
        "id": "ReplaceAttacker",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "[function no longer available after 1.034]"
      },
      {
        "id": "ChangeAttackTarget",
        "argstr": "c: Card|nil",
        "args": [
          {
            "id": "c",
            "type": "Card|nil"
          }
        ],
        "desc": "Changes the current monster being attacker to another card (or makes the attack a direct attack in case of no card being passed)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AttackCostPaid",
        "argstr": "paid: number",
        "args": [
          {
            "id": "paid",
            "type": "number"
          }
        ],
        "desc": "Register the status of payment of attack cost. If (int paid) == 2 means the attack cost is not paid."
      },
      {
        "id": "ReplaceAttackTarget",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "[to be checked but probably removed, seems to no exist]"
      },
      {
        "id": "CalculateDamage",
        "argstr": "c1: Card, c2: Card|nil",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card|nil"
          }
        ],
        "desc": "Conduct damage calculation between (Card c1) as attacker and (Card c2) or opponent player (nil)"
      },
      {
        "id": "GetBattleDamage",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Gets the battle damage (int player) would take",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ChangeBattleDamage",
        "argstr": "player: number, value: number[, check: boolean=true]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "check",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Changes the battle damage (int player) would take to (int value). If (bool check) == false, you are able change the battle damage that originally is 0."
      },
      {
        "id": "ChangeTargetCard",
        "argstr": "chainc: number, g: Group",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Changes a target card group of a certain chain effect (or the effect itself if chainc = 0)"
      },
      {
        "id": "ChangeTargetPlayer",
        "argstr": "chainc: number, player: in",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "player",
            "type": "in"
          }
        ],
        "desc": "Changes a target player of a certain chain effect (or the effect itself if chainc = 0)"
      },
      {
        "id": "ChangeTargetParam",
        "argstr": "chainc: number, param: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "param",
            "type": "number"
          }
        ],
        "desc": "change a target card group of a certain chain effect (or the effect itself if chainc = 0)"
      },
      {
        "id": "BreakEffect",
        "argstr": "",
        "args": [],
        "desc": "Separates an effect for the purposes of timing (Reflects the effects of the conjunctives \"then\" and \"also after that\")"
      },
      {
        "id": "ChangeChainOperation",
        "argstr": "chainc: number, f: function",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          }
        ],
        "desc": "Change the operation of a certain chain effect"
      },
      {
        "id": "NegateActivation",
        "argstr": "chainc: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          }
        ],
        "desc": "Negatee the activation of an effect",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "NegateEffect",
        "argstr": "chainc: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          }
        ],
        "desc": "Negates an effect",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "NegateRelatedChain",
        "argstr": "c: Card, reset: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "reset",
            "type": "number"
          }
        ],
        "desc": "Negates all effects activation in a chain related to a card (with a reset)"
      },
      {
        "id": "NegateSummon",
        "argstr": "targets: Card|Group",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          }
        ],
        "desc": "Negates the summon of a card"
      },
      {
        "id": "IncreaseSummonedCount",
        "argstr": "[c: Card]",
        "args": [
          {
            "id": "c",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Increases the number of summons performed in a turn (or in a card)"
      },
      {
        "id": "CheckSummonedCount",
        "argstr": "[c: Card]",
        "args": [
          {
            "id": "c",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Check if a certain card can be summoned",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetLocationCount",
        "argstr": "player: number, location: number[, use_player: number, reason: number = LOCATION_REASON_TOFIELD], zone: number = 0xff",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "location",
            "type": "number"
          },
          {
            "id": "use_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "reason",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns 2 values. First the number of zones that a player (target_player) has available in a location of the field (int location)[, that can be used by the player (use_player), with intention of (reason), among certain zones (zone)]. Second return is a flag",
        "ret": [
          "number",
          "number flag"
        ]
      },
      {
        "id": "GetFieldCard",
        "argstr": "player: number, location: number, seq: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "location",
            "type": "number"
          },
          {
            "id": "seq",
            "type": "number"
          }
        ],
        "desc": "Gets a card in certain location at a certain sequence",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "CheckLocation",
        "argstr": "player: number, location: number, seq: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "location",
            "type": "number"
          },
          {
            "id": "seq",
            "type": "number"
          }
        ],
        "desc": "Checks if there is an position (int seq) available for the player (int player) in the location (int location). (The sequence (int seq) is used to indicate the specific position of the location, for example in the location of monsters the sequence would go from 1 to 5., etc.)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetCurrentChain",
        "argstr": "",
        "args": [],
        "desc": "Gets the current chain",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetChainInfo",
        "argstr": "chainc: number, ...",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Gets the chain number (int chainc), or current chain if it's 0, various informations (described by constant group CHAININFO_)",
        "ret": [
          "..."
        ]
      },
      {
        "id": "GetFirstTarget",
        "argstr": "",
        "args": [],
        "desc": "Gets the current chain's first target card (first here doesn't mean \"first when selected\", so don't rely on this for multi-target effect)",
        "ret": [
          "Card",
          "..."
        ]
      },
      {
        "id": "GetCurrentPhase",
        "argstr": "",
        "args": [],
        "desc": "Gets the current Phase of the game (corresponds to PHASE_x in constants.lua)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SkipPhase",
        "argstr": "player: number, phase: number, reset_flag: number, reset_count: number[, value: number]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "phase",
            "type": "number"
          },
          {
            "id": "reset_flag",
            "type": "number"
          },
          {
            "id": "reset_count",
            "type": "number"
          },
          {
            "id": "value",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Makes the specified player (int player) skips the encountered phase (int phase), the effect is reset when reset_flag is met reset_count times. (int value) sets the skip effect's value (don't know what it's used for though...)"
      },
      {
        "id": "IsAttackCostPaid",
        "argstr": "",
        "args": [],
        "desc": "Return the status of payment of attack cost for a card (e.g. Mist Valley Falcon). Return 2 means it has not been paid.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsDamageCalculated",
        "argstr": "",
        "args": [],
        "desc": "Returns true if damage has been calculated during the current (or previous) damage calculation, otherwise returns false",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetAttacker",
        "argstr": "",
        "args": [],
        "desc": "Get the attacking card (or nil if there is no attacker)",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "GetAttackTarget",
        "argstr": "",
        "args": [],
        "desc": "Gets the attack target card (or nil if there's no attack target/the attack is a direct attack)",
        "ret": [
          "Card|nil"
        ]
      },
      {
        "id": "NegateAttack",
        "argstr": "",
        "args": [],
        "desc": "Negates the current attack. Has no effect if the game has confirmed battle (about to enter Damage Step)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ChainAttack",
        "argstr": "[c: Card]",
        "args": [
          {
            "id": "c",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Makes the currently attacking card attacks a card (Card c) after it's current attack"
      },
      {
        "id": "Readjust",
        "argstr": "",
        "args": [],
        "desc": "Makes the game do the adjustments ( win, disable, control, self destroy, equip, position, trap monster). Calling this while adjusting (most likely, in EVENT_ADJUST) four times with the same card (calling this will raise EVENT_ADJUST at the end, so it is possible to loop) will make the card instantly destroyed."
      },
      {
        "id": "AdjustInstantly",
        "argstr": "[c: Card]",
        "args": [
          {
            "id": "c",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Adjust the stats of a card applying possible negation effects (i guess)"
      },
      {
        "id": "GetFieldGroup",
        "argstr": "player: number, s: number, o: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          }
        ],
        "desc": "Gets a group containing cards from a specified location of a player (int player), s denotes the player's side of the field, o denotes opposing player's side of the field",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetFieldGroupCount",
        "argstr": "player: number, s: number, o: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          }
        ],
        "desc": "Counts the number of cards from a specified location of a player (int player), s denotes the player's side of the field, o denotes opposing player's side of the field",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetDecktopGroup",
        "argstr": "player: number, count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Gets a group of a player's (int player) top n (int count) cards of their Deck",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetMatchingGroup",
        "argstr": "f: function, player: number, s: number, o: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Gets all cards in locations (int s) (on (int player)'s side of the field) and (int o) (on their opponent's) for which (function f) returns true, except (Card ex)",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetMatchingGroupCount",
        "argstr": "f: function, player: number, s: number, o: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Get the number of cards in locations (int s) (on (int player)'s side of the field) and (int o) (on their opponent's) for which (function f) returns true, except (Card ex)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetFirstMatchingCard",
        "argstr": "f: function, player: number, s: number, o: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Get the first card in locations (int s) (on (int player)'s side of the field) and (int o) (on their opponent's) for which (function f) returns true, except (Card ex)",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "IsExistingMatchingCard",
        "argstr": "f: function, player: number, s: number, o: number, count: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Checks if (int count) cards exist in locations (int s) (on (int player)'s side of the field) and (int o) (on their opponent's) for which (function f) returns true, except (Card ex)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectMatchingCard",
        "argstr": "sel_player: number, f: function, player: number, s: number, o: number, min: number, max: number[, e: cancelabl=false], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "sel_player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "e",
            "type": "cancelabl",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Make (int sel_player) select between (int min) and (int max) cards in locations (int s) (on (int player)'s side of the field) and (int o) (on their opponent's) for which (function f) returns true, except (Card ex). If cancelable is true and the selection is canceled nil will be returned.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetReleaseGroup",
        "argstr": "player: number[, use_hand: boolean=false, use_oppo: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "use_oppo",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "get a group used for tribute",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetReleaseGroupCount",
        "argstr": "player: number[, use_hand: boolean=false, use_oppo: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "use_oppo",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "get the number of card in the group used for tribute",
        "ret": [
          "number"
        ]
      },
      {
        "id": "CheckReleaseGroup",
        "argstr": "player: number, f: function, count: number[, use_hand: boolean=false, max: number=min, check_field: boolean=false, card_to_check: Card=nil, to_player: number=player, zone: number=0xff], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          },
          {
            "id": "check_field",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "card_to_check",
            "type": "Card",
            "opt": true
          },
          {
            "id": "to_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Check if there is a monster that can be used as tribute from the int player, that satisfies function, having a min of the count specified with the exception of some card/group if specified, ... are extra arguments.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckReleaseGroupCost",
        "argstr": "player: number, f: function, count: number, use_hand: boolean, spcheck: function, ex: card|group|nil, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean"
          },
          {
            "id": "spcheck",
            "type": "function"
          },
          {
            "id": "ex",
            "type": "card|group|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Check if the player can tribute to activate effect a monster, satisfying a specific function",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckReleaseGroupEx",
        "argstr": "player: number, f: function, count: number[, use_hand: boolean=false, max: number=min, check_field: boolean=false, card_to_check: Card=nil, to_player: number=player, zone: number=0xff, use_oppo: boolean=false], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          },
          {
            "id": "check_field",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "card_to_check",
            "type": "Card",
            "opt": true
          },
          {
            "id": "to_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          },
          {
            "id": "use_oppo",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Same as Duel.CheckReleaseGroup, except that it include hands too. If cancelable is true and the selection is canceled nil will be returned.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectReleaseGroup",
        "argstr": "sel_player: number, f: function, min: number, max: number[, use_hand: boolean=false, cancelable: boolean=false, check_field: boolean=false, card_to_check: Card=nil, to_player: number=player, zone: number=0xff, use_oppo: boolean=false], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "sel_player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "cancelable",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "check_field",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "card_to_check",
            "type": "Card",
            "opt": true
          },
          {
            "id": "to_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          },
          {
            "id": "use_oppo",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Selects monsters to be tributed by int sel_player, that satisfies function f, within a amount betwen int min and int max (include these values), with exception of some card/group, if any, ... is extra arguments. If cancelable is true and the selection is canceled nil will be returned.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "SelectReleaseGroupEx",
        "argstr": "player: number, f: function, min: number, max: number[, use_hand: boolean=false, cancelable: boolean=false, check_field: boolean=false, card_to_check: Card=nil, to_player: number=player, zone: number=0xff, use_oppo: boolean=false], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "cancelable",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "check_field",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "card_to_check",
            "type": "Card",
            "opt": true
          },
          {
            "id": "to_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          },
          {
            "id": "use_oppo",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Same as Duel.SelectReleaseGroup, except that it includes hand too.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "SelectReleaseGroupCost",
        "argstr": "player: number, f: function, min: number, max: number, use_hand: boolean, specialchk: function, ex: card|group|nil, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "use_hand",
            "type": "boolean"
          },
          {
            "id": "specialchk",
            "type": "function"
          },
          {
            "id": "ex",
            "type": "card|group|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "select a group of cards to be tributed as cost by a int player that satisfies function f, needing to select from a int min number of card to a int max number of card, using or not the hand (bool use_hand), if a function specialchk is specified it need to satisfies that as well (for example aux.ChkfMMZ in case you need a free space later), with some exception and extra arguments.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetTributeGroup",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetTributeCount",
        "argstr": "c: Card[, mg: Group, ex: boolean=false]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          },
          {
            "id": "ex",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GrabSelectedCard ",
        "argstr": "",
        "args": [],
        "desc": ""
      },
      {
        "id": "SelectTribute",
        "argstr": "player: number, c: Card, min: number, max: number[, mg: Group, ex: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          },
          {
            "id": "ex",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Makes (int player) select a (int min) and (int max) number of tributes to be used for (Card c). If provided, (mg) is the forced group.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetTargetCount",
        "argstr": "f: function, player: number, s: number, o: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Returns the number of targets, except (Group/Card ex), that match (function f), taking (int player) as the referential player, in locations defined in (int s) for your cards and (int o) for opponent's.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsExistingTarget",
        "argstr": "f: function, player: number, s: number, o: number, count: number, ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "Group|Card|nil"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Returns if that are at least (int count) targets, except (Group/Card ex) that match (function f), taking (int player) as the referential player, in locations defined in (int s) for your cards and (int o) for opponent's.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectTarget",
        "argstr": "sel_player: number, f: function, player: number, s: number, o: number, min: number, max: number[, cancelable: boolean=false], ex: Group|Card|nil, ...",
        "args": [
          {
            "id": "sel_player",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "cancelable",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "ex",
            "type": "Group|Card|nil",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Makes int sel_player select targets that match function f, from int s's possesion and/or int o's possesion, with a int min and int max of targets, except Group/Card ex. If cancelable is true and the selection is canceled nil will be returned.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "SelectFusionMaterial",
        "argstr": "player: number, c: Card, g: Group[, gc: Card|nil, chkf: number=PLAYER_NONE]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "gc",
            "type": "Card|nil",
            "opt": true
          },
          {
            "id": "chkf",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Makes int player select Fusion Materials to summon card c from group g.",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "SetFusionMaterial",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Defines a group (Group g) to be used as fusion material within an effect"
      },
      {
        "id": "SetSynchroMaterial",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Defines a group (Group g) to be used as synchro material within an effect"
      },
      {
        "id": "SelectSynchroMaterial",
        "argstr": "player: number, c: Card, f1: function, f2: function, min: number, max: number[, smat: Card, mg: Group]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "smat",
            "type": "Card",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          }
        ],
        "desc": "Makes int player select Synchro material to summon a Card c, that match filter function f1, with a minimum of int min, and maximum of int max",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "CheckSynchroMaterial",
        "argstr": "c: Card, f1: function, f2: function, min: number, max: number[, smat: Card, mg: Group]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "smat",
            "type": "Card",
            "opt": true
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectTunerMaterial",
        "argstr": "player: number, c: Card, tuner: Card, f1: function, f2: function, min: number, max: number[, mg: Group]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tuner",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          }
        ],
        "desc": "Makes int player selects tuner materials for card c that match function f1, with a int min number and a int ,ax number",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "CheckTunerMaterial",
        "argstr": "c: Card, tuner: Card, f1: function, f2: function, min: number, max: number[, mg: Group]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tuner",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetRitualMaterial",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "ReleaseRitualMaterial",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Tributes monsters from group g for a Ritual Summon"
      },
      {
        "id": "SetSelectedCard",
        "argstr": "cards: Card|Group",
        "args": [
          {
            "id": "cards",
            "type": "Card|Group"
          }
        ],
        "desc": "Sets a card/group (Card|Group targets) as cards that would need to be used as Synchro/Xyz/Ritual/Fusion materials"
      },
      {
        "id": "SetTargetCard",
        "argstr": "targets: Card|Group",
        "args": [
          {
            "id": "targets",
            "type": "Card|Group"
          }
        ],
        "desc": "Sets the target to be a card or group"
      },
      {
        "id": "ClearTargetCard",
        "argstr": "",
        "args": [],
        "desc": "Removes the targets defined"
      },
      {
        "id": "SetTargetPlayer",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Defines the player to be the 'target' to (int player)"
      },
      {
        "id": "SetTargetParam",
        "argstr": "r: numbe",
        "args": [
          {
            "id": "r",
            "type": "numbe"
          }
        ],
        "desc": "Defines the parameter"
      },
      {
        "id": "SetOperationInfo",
        "argstr": "chainc: number, category: number, targets: Card|Group, count: number, target_player: number, target_param: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "category",
            "type": "number"
          },
          {
            "id": "targets",
            "type": "Card|Group"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "target_param",
            "type": "number"
          }
        ],
        "desc": "Sets informations about the operation being performed in the current (int chainc = 0) chain, belonging to (int category), with a total of (int count) of card(s) from (Card|Group targets) being affected. These are used with GetOperationInfo. Also, the parameter passed here are checked if any of the summon related activities are checked like ACTIVITY_SUMMON, ACTIVITY_NORMALSUMMON, ACTIVITY_SPSUMMON and ACTIVITY_FLIPSUMMON."
      },
      {
        "id": "GetOperationInfo",
        "argstr": "chainc: number, category: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "category",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "boolean",
          "Card|Group",
          "number",
          "number",
          "number"
        ]
      },
      {
        "id": "GetOperationCount",
        "argstr": "chainc: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "number"
        ]
      },
      {
        "id": "CheckXyzMaterial",
        "argstr": "c: Card, f: function, lv: number, min: number, max: number, mg: Group|nil",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "lv",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "Group|nil"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectXyzMaterial",
        "argstr": "player: number, c: Card, f: function, lv: number, min: number, max: number[, mg: Group]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "lv",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "Group",
            "opt": true
          }
        ],
        "desc": "Makes int player selects monsters with level lv that match function f to be Xyz material, with a int min number an int max number of monsters. If group mg is informed, the monsters must be selected from that group",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "Overlay",
        "argstr": "c: Card, of_card: Card|Group",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "of_card",
            "type": "Card|Group"
          }
        ],
        "desc": "Attachs (Card|Group of_card) to (Card c)"
      },
      {
        "id": "GetOverlayGroup",
        "argstr": "player: number, s: number, o: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          }
        ],
        "desc": "Returns the group of cards currently as Xyz materials",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetOverlayCount",
        "argstr": "player: number, s: number, o: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          }
        ],
        "desc": "Return the number of cards currently as Xyz Materials",
        "ret": [
          "number"
        ]
      },
      {
        "id": "CheckRemoveOverlayCard",
        "argstr": "player: number, s: number, o: number, count: number, reason: number[, ocard: Group]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          },
          {
            "id": "ocard",
            "type": "Group",
            "opt": true
          }
        ],
        "desc": "Returns if (int player) can remove a total of (int count) cards attached, for reason (int reason) from your field (int s) and/or opponent's (card o). If group (ocard) is provided, only checks if cards can be detached from monsters that match said group.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RemoveOverlayCard",
        "argstr": "player: number, s: number, o: number, min: number, max: number, reason: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "reason",
            "type": "number"
          }
        ],
        "desc": "Player (int player) removes cards attached, from your field (int s) and/or opponent's  (int o), with a minimum of (int min), and a maximum of (int max), with reason (int reason)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "Hint",
        "argstr": "hint_type: number, player: number, desc: number",
        "args": [
          {
            "id": "hint_type",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "desc",
            "type": "number"
          }
        ],
        "desc": "Executes a Hint, to be displayed by int player with int desc"
      },
      {
        "id": "HintSelection",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Shows a hint of the group g selected"
      },
      {
        "id": "SelectEffectYesNo",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Asks (int player) if they would like to use the effect of (Card c), highlighting it",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectYesNo",
        "argstr": "player: number, desc: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "desc",
            "type": "number"
          }
        ],
        "desc": "Asks (int player) Yes or No, with the question being specified by (int desc)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectOption",
        "argstr": "player: number[, confirm_dialog: boolean=true], desc1: number, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "confirm_dialog",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "desc1",
            "type": "number",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Allows (int player) to choose between any number of options, starting with (int desc1). Returns the index of the chosen option, e.g. desc1 returns 0, the second option returns 1, etc. If confirm_dialog is set to false, the announce will be performed, but the optselected hint wont' be shown",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SelectSequence",
        "argstr": "",
        "args": [],
        "desc": ""
      },
      {
        "id": "SelectPosition",
        "argstr": "player: number, c: Card, pos: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "pos",
            "type": "number"
          }
        ],
        "desc": "Makes int player select a position int pos for card c",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SelectDisableField",
        "argstr": "player: number, count: number, s: number, o: number, filter: number, check: boolean",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "filter",
            "type": "number"
          },
          {
            "id": "check",
            "type": "boolean"
          }
        ],
        "desc": "Asks (int player) to select zones to be disabled, a number of zones up to (int count), in locations (int s) for the player and (int o) for their opponent, that are bitmasked by (int filter) <in another word, zones that are not filter>. Setting the optional parameter (bool check) to true allows the player to select any zones, including Pendulum and Extra Monster Zone which are normally not allowed.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SetCoinResult",
        "argstr": "res: number, ... ",
        "args": [
          {
            "id": "res",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": ""
      },
      {
        "id": "SetDiceResult",
        "argstr": "res: number, ...",
        "args": [
          {
            "id": "res",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": ""
      },
      {
        "id": "AnnounceRace",
        "argstr": "player: number, count: number, available: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "available",
            "type": "number"
          }
        ],
        "desc": "Asks (int player) to announce (int count) number of Races, amongst those specified in (int available).",
        "ret": [
          "number"
        ]
      },
      {
        "id": "AnnounceAttribute",
        "argstr": "player: number, count: number, available: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "available",
            "type": "number"
          }
        ],
        "desc": "Asks (int player) to announce (int count) number of Attributes, amongst those specified in (int available).",
        "ret": [
          "number"
        ]
      },
      {
        "id": "AnnounceLevel",
        "argstr": "player: number[, min: number = 1, max: number=12, exception: number=nil, ...]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          },
          {
            "id": "exception",
            "type": "number",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Asks (int player) to announce a number between (int min) and (int max), except any (int exception)s. Returns the chosen number, and the index of that number amongst the choices.",
        "ret": [
          "number|nil",
          "number|nil"
        ]
      },
      {
        "id": "AnnounceCard",
        "argstr": "player: number[, type: number=TYPE_MONSTER+TYPE_SPELL+TYPE_TRAP]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "type",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Makes int player declare a card. If the type is provided as extra parameter the card must be from that type",
        "ret": [
          "number"
        ]
      },
      {
        "id": "AnnounceType",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Makes int player declare a type",
        "ret": [
          "number"
        ]
      },
      {
        "id": "AnnounceNumber",
        "argstr": "player: number, number: number, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "number",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Asks (int player) to announce a number found amongst (int number)s. Returns the chosen number and its index amongst the options",
        "ret": [
          "number",
          "number"
        ]
      },
      {
        "id": "AnnounceCoin",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Asks (int player) to call heads or tails",
        "ret": [
          "number"
        ]
      },
      {
        "id": "TossCoin",
        "argstr": "player: number, count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Tosses (int count) coins on behalf of (int player), and returns all the results",
        "ret": [
          "..."
        ]
      },
      {
        "id": "TossDice",
        "argstr": "player: number, count1: number[, count2: number = 0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count1",
            "type": "number"
          },
          {
            "id": "count2",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Rolls (int count) dice on behalf of (int player), and returns all the results",
        "ret": [
          "..."
        ]
      },
      {
        "id": "GetCoinResult",
        "argstr": "",
        "args": [],
        "desc": "Returns multiple values per each coin flipped",
        "ret": [
          "number",
          "number",
          "number",
          "number",
          "number"
        ]
      },
      {
        "id": "GetDiceResult",
        "argstr": "",
        "args": [],
        "desc": "Returns the values per dice roled",
        "ret": [
          "number",
          "number",
          "number",
          "number",
          "number"
        ]
      },
      {
        "id": "SetCoinResult",
        "argstr": "res: number, ... ",
        "args": [
          {
            "id": "res",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Changes the result of a coin flip to the result provided"
      },
      {
        "id": "SetDiceResult",
        "argstr": "res: number, ...",
        "args": [
          {
            "id": "res",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Changes the result of a dice roll to the result provided"
      },
      {
        "id": "IsPlayerAffectedByEffect",
        "argstr": "player: number, code: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Checks if (int player) is being affected by the effect (int code), e.g. Spirit Elimination or Blue-Eyes Spirit Dragon",
        "ret": [
          "Effect|nil"
        ]
      },
      {
        "id": "IsPlayerCanDraw",
        "argstr": "player: number[, count: number=0]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if (int player) can draw (int count) cards from their deck",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanDiscardDeck",
        "argstr": "player: number, count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Checks if a player (int player) can mill a number of cards (int count) from their Deck",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanDiscardDeckAsCost",
        "argstr": "player: number, count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Checks if a player (int player) can mill a number of cards (int count) from their Deck as cost",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSummon",
        "argstr": "player: number[, sumtype: number, c: Card]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "c",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Checks if (int player) can Normal Summon (Card c) through (int sumtype)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSpecialSummon",
        "argstr": "player: number[, sumtype: number, sumpos: number, target_player: number, c: Card]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          },
          {
            "id": "sumpos",
            "type": "number",
            "opt": true
          },
          {
            "id": "target_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "c",
            "type": "Card",
            "opt": true
          }
        ],
        "desc": "Checks if (int player) can Special Summon (Card c) through (int sumtype), in (int sumpos) position, to (int target_player)'s field",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanFlipSummon",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if (int player) can Flip Summon (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSpecialSummonMonster",
        "argstr": "player: number, code: number, setcode: number, type: number, atk: number, def: number, level: number, race: number, attribute: number[, pos: number=POS_FACEUP, target_player: number=player, sumtype: number]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "setcode",
            "type": "number"
          },
          {
            "id": "type",
            "type": "number"
          },
          {
            "id": "atk",
            "type": "number"
          },
          {
            "id": "def",
            "type": "number"
          },
          {
            "id": "level",
            "type": "number"
          },
          {
            "id": "race",
            "type": "number"
          },
          {
            "id": "attribute",
            "type": "number"
          },
          {
            "id": "pos",
            "type": "number",
            "opt": true
          },
          {
            "id": "target_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "sumtype",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Checks if (int player) can Special Summon a monster fitting the given stats. ",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSpecialSummonCount",
        "argstr": "player: number, count: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Checks if (int player) can Special Summon (int count) times.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanRelease",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a player (int player) can Tribute a card (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanRemove",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a player (int player) can banish a card (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSendtoHand",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a player (int player) can send a card (Card c) to the Hand",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSendtoGrave",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a player (int player) can send a card (Card c) to the Graveyard",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsPlayerCanSendtoDeck",
        "argstr": "player: number, c: Card",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a player (int player) can send a card (Card c) to the Deck",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsChainNegatable",
        "argstr": "chainc: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          }
        ],
        "desc": "Check if a chain's (int chainc) effect activation can be negated (Negate Activation)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsChainDisablable",
        "argstr": "chainc: number",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          }
        ],
        "desc": "Check if a chain's (int chainc) effect can be disabled (Negate Effect)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckChainTarget",
        "argstr": "chainc: number, c: Card",
        "args": [
          {
            "id": "chainc",
            "type": "number"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if a card (Card c) can be a target for a chain's (int chainc) effect (via calling target(chkc) function of the effect)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckChainUniqueness",
        "argstr": "",
        "args": [],
        "desc": "Checks if there is no card with the same name in the current chain",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GetActivityCount",
        "argstr": "player: number, activity_type: number, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "activity_type",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Get the number of times (int player) has performed activities of (int activity_type)",
        "ret": [
          "number",
          "..."
        ]
      },
      {
        "id": "CheckPhaseActivity",
        "argstr": "",
        "args": [],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AddCustomActivityCounter",
        "argstr": "counter_id: number, activity_type: number, f: function",
        "args": [
          {
            "id": "counter_id",
            "type": "number"
          },
          {
            "id": "activity_type",
            "type": "number"
          },
          {
            "id": "f",
            "type": "function"
          }
        ],
        "desc": "Register an activity with type int activity_type, with id int counter_id, that matches function f"
      },
      {
        "id": "GetCustomActivityCount",
        "argstr": "counter_id: number, player: number, activity_type: number",
        "args": [
          {
            "id": "counter_id",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "activity_type",
            "type": "number"
          }
        ],
        "desc": "Returns an activity with type int activity_type, with id int counter_id, for player int player",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetBattledCount",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Get the number of battles (int player) has been involved in this turn",
        "ret": [
          "number"
        ]
      },
      {
        "id": "IsAbleToEnterBP",
        "argstr": "",
        "args": [],
        "desc": "Checks if the player can enter BP this turn.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "VenomSwampCheck",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SwapDeckAndGrave",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Swaps the cards from (int player)'s GY with the cards from his deck."
      },
      {
        "id": "MajesticCopy",
        "argstr": "c1: Card, c2: Card",
        "args": [
          {
            "id": "c1",
            "type": "Card"
          },
          {
            "id": "c2",
            "type": "Card"
          }
        ],
        "desc": "Allows (Card c1) to use one of (Card c2)'s activated effects. (Majestic Star Dragon)"
      },
      {
        "id": "SelectFieldZone",
        "argstr": "player: number, count: number, s: number, o: number, filter: number[, check: boolean=false]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "filter",
            "type": "number"
          },
          {
            "id": "check",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Asks (int player) to choose a number of Zones up to (int count), in locations (int s) for the player and (int o) for their opponent, that are bitmasked by (int filter) <in another word, zones that are not filter>. Setting (bool check) to true allows the player to select any zones, including Pendulum and Extra Monster Zone which are normally not allowed.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetRandomNumber",
        "argstr": "[min: number = 0, ]max: number",
        "args": [
          {
            "id": "min",
            "type": "number",
            "opt": true
          },
          {
            "id": "max",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Gets a random number between min (default is 0) and max. ",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetLinkedZone",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Gets all the zones thta (int player) has that Link Monsters points to",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetFreeLinkedZone",
        "argstr": "player: number",
        "args": [
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "Gets all the unoccupied zones that (int player) has that Link Monsters points to",
        "ret": [
          "number"
        ]
      },
      {
        "id": "RockPaperScissors",
        "argstr": "[repeat: boolean=true]",
        "args": [
          {
            "id": "repeat",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Has players play a game of Rock Paper Scissors. Return player (winner or PLAYER_NONE). If repeat == true, RPS continues until there is a winner, otherwise RPS is only played once.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "SetFlagEffectLabel",
        "desc": "Sets a label for a flag effect"
      },
      {
        "id": "SwapSequence",
        "desc": "Exchanges the positions of two cards on the field"
      },
      {
        "id": "GetLinkedGroup",
        "desc": "Gets a group of cards the given Link Monster points to",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetChainEvent",
        "desc": "Gets the event in a chain",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetPlayerEffect ",
        "argstr": "player: number[, effect_type: number]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "effect_type",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Returns all the effect with that code (int effect_type) applied on the player. With no effect_type or effect_type=0 it will return all the effects applied on the player. [effect_type refer to \"EFFECT_\" constants, eg: EFFECT_REVERSE_DAMAGE, EFFECT_CANNOT_MSET]",
        "ret": [
          "Effect",
          "..."
        ]
      },
      {
        "id": "GetMasterRule",
        "argstr": "",
        "args": [],
        "desc": "Gets the master rule the current duel is being played under (eg. obsolute rules)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetFlagEffectLabel",
        "desc": "Returns the label of a flag effect, that was previously set"
      },
      {
        "id": "GetLocationCountFromEx",
        "argstr": "player: number,  [rplayer: number, sg: group|card, lc: card]",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "rplayer",
            "type": "number"
          },
          {
            "id": "sg",
            "type": "group|card",
            "opt": true
          },
          {
            "id": "lc",
            "type": "card",
            "opt": true
          }
        ],
        "desc": "Gets the number of available zones that (int player) has to perform a Special Summon from the Extra Deck. Optional Parameters: int rplayer is the player performing the summon , by default comes from the player that activates the effect itself; sg are material(s) or tribute(s) for the special summon, it's included when the effect requires the cost of one or more cards; lc is the card that will be special summoned, it's included when it's a specific card which will be special summon). If lc is group, it cannot be passed directly. Instead, pass the type of the monsters in that group (e.g. TYPE_FUSION, see \"Construct Element\"), which is limited to a single type and will not work properly if the group has different types.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "AssumeReset",
        "argstr": "",
        "args": [],
        "desc": "Manually resets assume effects. Usually used in syncro summon. (eg: it resets the applied effect of \"Influence Dragon (Anime)\" on the other materials in the Synchro Summon.)"
      },
      {
        "id": "GetLinkedGroupCount",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "Returns the number of cards linked to (card c)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetUsableMZoneCount",
        "argstr": "target_player: number[, using_player: number=target_player]",
        "args": [
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "using_player",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Gets the number of Monster Zones that are not disabled",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Activate",
        "argstr": "",
        "args": [],
        "desc": "Activates a card/effect"
      },
      {
        "id": "GetMZoneCount",
        "argstr": "target_player: number[, ex: card|group = nil, use_player: number = target_player, reason: number = LOCATION_REASON_TOFIELD, zone: number = 0xff]",
        "args": [
          {
            "id": "target_player",
            "type": "number"
          },
          {
            "id": "ex",
            "type": "card|group",
            "opt": true
          },
          {
            "id": "use_player",
            "type": "number",
            "opt": true
          },
          {
            "id": "reason",
            "type": "number",
            "opt": true
          },
          {
            "id": "zone",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Gets the number of available Main Monster Zones of a player (target_player)[, excluding card|group (ex), that can be used by the player (use_player), with intention of (reason), among certain zones (zone)]    {note: Basically it is Duel.GetLocationCount that excludes}",
        "ret": [
          "number"
        ]
      },
      {
        "id": "GetTargetCards",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Returns a group containing the targeted cards of (Effect e)'s activation",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "GetMetatable",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "",
        "ret": [
          "table"
        ]
      },
      {
        "id": "CheckReleaseGroupSummon",
        "argstr": "c: card, player: number, e: effect, fil: function, min: number, max: number, last: function, ...",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "e",
            "type": "effect"
          },
          {
            "id": "fil",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "last",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectReleaseGroupSummon",
        "argstr": "c: card, player: number, e: effect, fil: function, min: number, max: number, last: function, ...",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "e",
            "type": "effect"
          },
          {
            "id": "fil",
            "type": "function"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "last",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckReleaseGroupCost",
        "argstr": "p: t, f, t: c, d: use_han, k: specialch, x: e, ...",
        "args": [
          {
            "id": "p",
            "type": "t"
          },
          {
            "id": "f",
            "type": ""
          },
          {
            "id": "t",
            "type": "c"
          },
          {
            "id": "d",
            "type": "use_han"
          },
          {
            "id": "k",
            "type": "specialch"
          },
          {
            "id": "x",
            "type": "e"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SelectReleaseGroupCost",
        "argstr": "p: t, f, c: min, c: max, d: use_han, k: specialch, x: e, ...",
        "args": [
          {
            "id": "p",
            "type": "t"
          },
          {
            "id": "f",
            "type": ""
          },
          {
            "id": "c",
            "type": "min"
          },
          {
            "id": "c",
            "type": "max"
          },
          {
            "id": "d",
            "type": "use_han"
          },
          {
            "id": "k",
            "type": "specialch"
          },
          {
            "id": "x",
            "type": "e"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "group"
        ]
      }
    ]
  },
  {
    "cls": "aux",
    "methods": [
      {
        "id": "EnableNeosReturn",
        "argstr": "c: Card[, extracat: number, extrainfo: function, extraop: function]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "extracat",
            "type": "number",
            "opt": true
          },
          {
            "id": "extrainfo",
            "type": "function",
            "opt": true
          },
          {
            "id": "extraop",
            "type": "function",
            "opt": true
          }
        ],
        "desc": "Adds the effect to shuffle the card into the Extra Deck at the End Phase (most commonly used by \"Neos\" Fusion Monsters). If provided, \"extracat\", \"extrainfo\" and \"extraop\" will add additional effect categories, operation info and operations respectively to the effect. The Condition, Target and Operation functions of this effect, named NeosReturnCondition1/2, NeosReturnTarget and NeosReturnOperation, are detailed in the utility. "
      },
      {
        "id": "seqmovcon",
        "desc": "Condition for effects that make the monster change its current sequence/column.",
        "ret": [
          "function"
        ]
      },
      {
        "id": "seqmovop",
        "desc": "Operation for effects that make the monster change its current sequence/column.",
        "ret": [
          "function"
        ]
      },
      {
        "id": "FilterFaceupFunction",
        "desc": "filter to check face-up on select(matching card/target) and if exist(matching card/target) functions params",
        "ret": [
          "function"
        ]
      },
      {
        "id": "GetMustBeMaterialGroup",
        "argstr": "tp: number, eg: nil|Group, sump: number, sc: nil|Card, g: nil|Group, r: number",
        "args": [
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "nil|Group"
          },
          {
            "id": "sump",
            "type": "number"
          },
          {
            "id": "sc",
            "type": "nil|Card"
          },
          {
            "id": "g",
            "type": "nil|Group"
          },
          {
            "id": "r",
            "type": "number"
          }
        ],
        "desc": "Gets the group that must be used as material (Contacting \"C\"). (int tp) is the affected player, (nil|Group eg) is all detected materials, (int sump) is the Summoning player, (nil|Card sc) is the card to be Summoned, (nil|Group) g is all the valid usable materials, (int r) is the reason e.g. REASON_SYNCHRO, REASON_XYZ",
        "ret": [
          "Group"
        ]
      },
      {
        "id": "Stringid",
        "argstr": "code: number, n: number",
        "args": [
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "n",
            "type": "number"
          }
        ],
        "desc": "Returns the description code using the database entry's code (int code) and from the nth position (int position) which can be 0-15 corresponding to the str in the database which are from str1 to str16",
        "ret": [
          "number"
        ]
      },
      {
        "id": "Next",
        "argstr": "g: Group",
        "args": [
          {
            "id": "g",
            "type": "Group"
          }
        ],
        "desc": "Iterates over the cards in (Group g) for use with for loops",
        "ret": [
          "iterator"
        ]
      },
      {
        "id": "NULL",
        "argstr": "",
        "args": [],
        "desc": "Function that returns nil",
        "ret": [
          "nil"
        ]
      },
      {
        "id": "TRUE",
        "argstr": "",
        "args": [],
        "desc": "Function that returns true. Can be used to return a whole group of cards in a certain location",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "FALSE",
        "argstr": "",
        "args": [],
        "desc": "Function that returns false",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AND",
        "argstr": "...)(...",
        "args": [
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "First (...) is a list of functions which will be used to check the parameters in the second set of (...), separated with \"and\". The second set of (...) is applied automatically when used as a filter.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "OR",
        "argstr": "...)(...",
        "args": [
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "First (...) is a list of functions which will be used to check the parameters in the second set of (...), separated with \"or\". The second set of (...) is applied automatically when used as a filter.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "NOT",
        "argstr": "f: function)(...",
        "args": [
          {
            "id": "f",
            "type": "function"
          }
        ],
        "desc": "This is equivalent to not f(...), if used as filter checking, (...) is automatically applied",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "BeginPuzzle",
        "argstr": "",
        "args": [],
        "desc": "Sets up the beginning of a puzzle, causing the player to lose during the End Phase"
      },
      {
        "id": "PuzzleOp",
        "argstr": "e: Effect, tp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Used by aux.BeginPuzzle(), sets the first turn player's LP to 0"
      },
      {
        "id": "IsGeminiState",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Checks if an effect's handler (corresponding card) is a Gemini monster applying its effect.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsNotGeminiState",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "returns not aux.IsGeminiState(Effect e)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GeminiNormalCondition",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "Checks if a monster is face-up and is not a Gemini monster or has not been Normal Summoned on the field.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "EnableGeminiAttribute",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Applies all the effects necessary for a Gemini monster to be used as one to (Card c)."
      },
      {
        "id": "EnableSpiritReturn",
        "argstr": "c: Card, event1: number, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "event1",
            "type": "number"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Sets up EVENT triggers to (Card c) so it returns to the hand during that End Phase, requires a minimum of 1 (int event1)"
      },
      {
        "id": "TargetEqualFunction",
        "argstr": "f: function, value: number, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Used in SetTarget filters (with parameters (e,c)) to check a function and its (...) parameters is equal to the inputted (int value).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "TargetBoolFunction",
        "argstr": "f: function, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Used in SetTarget filters (with parameters (e,c)) to check a function and its (...) parameters",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "FilterEqualFunction",
        "argstr": "f: function, value: number, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Used in filters (with parameter (Card c)) to check a function and its (...) parameters is equal to the inputted (int value).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "FilterBoolFunctionEx",
        "argstr": "f: function, value: number",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "value",
            "type": "number"
          }
        ],
        "desc": "Used filter for the Fusion, Xyz, Synchro and Link Procedures where (function f) can be Card.IsRace, Card.IsAttribute and Card.IsType and (int value) corresponds to the required Race, Attribute and Type.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "FilterBoolFunction",
        "argstr": "f: function, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Used in filters (with parameter (Card c)) to check a function and its (...) parameters",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ProcCancellable",
        "desc": "Used with the Xyz Summon procedure and a fw Xyz monsters. Defined as false.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsMaterialListCode",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if 1 of the codes in (int ...) is a listed Fusion Material in (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsMaterialListSetCard",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if 1 of the setcodes in (int ...) is a listed archetype in a material of (Card c)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "IsCodeListed",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Checks if 1 of the codes in (int ...) is a listed card in (Card c)'s text",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "disfilter1",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Checks if (Card c) can be negated.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "bdcon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Default condition of EVENT_BATTLE_DESTROYING. \"When this card destroys a monster by battle\" and checks if itself is still the same state after battle.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "bdocon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Condition of EVENT_BATTLE_DESTROYING. \"When this card destroys an opponent's monster by battle\" and checks if itself is still the same state after battle.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "bdgcon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Condition of EVENT_BATTLE_DESTROYING. \"When this card destroys a monster by battle and sends it to the Graveyard\" and checks if itself is still the same state after battle.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "bdogcon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Condition of EVENT_BATTLE_DESTROYING. \"When this card destroys an opponent's monster by battle and sends it to the Graveyard\" and checks if itself is still the same state after battle.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "dogcon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "SetCondition for \"is destroyed by your opponent\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "exccon",
        "argstr": "e: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          }
        ],
        "desc": "SetCondition for \"except the turn this card was sent to the Graveyard\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "chainreg",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Flag effect used for Spell Counter (that are put when the Spell card resolves)"
      },
      {
        "id": "imval1",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "default filter for EFFECT_CANNOT_BE_BATTLE_TARGET where (Card c) is checked to ensure it's not immune to (Effect e)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "imval2",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "similar to aux.imval1, but also check if the monster is from opponent.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "tgoval",
        "argstr": "e: Effect, re: Effect, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "filter for EFFECT_CANNOT_BE_EFFECT_TARGET, \"cannot be targeted by your opponent's card effects\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "nzatk",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Filter checking if (Card c) is face-up and has more than 0 ATK",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "nzdef",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Filter checking if (Card c) is face-up and has more than 0 DEF",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "sumreg",
        "argstr": "e: Effect, tp: number, eg: Group, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Used as SetOperation which registers a FlagEffect to cards in the event group with the same OriginalCode as itself"
      },
      {
        "id": "fuslimit",
        "argstr": "e: Effect, se: Effect, sp: number, st: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "se",
            "type": "Effect"
          },
          {
            "id": "sp",
            "type": "number"
          },
          {
            "id": "st",
            "type": "number"
          }
        ],
        "desc": "SPSUMMON condition \"Must be Fusion Summoned\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ritlimit",
        "argstr": "e: Effect, se: Effect, sp: number, st: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "se",
            "type": "Effect"
          },
          {
            "id": "sp",
            "type": "number"
          },
          {
            "id": "st",
            "type": "number"
          }
        ],
        "desc": "SPSUMMON condition \"Must be Ritual Summoned\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "synlimit",
        "argstr": "e: Effect, se: Effect, sp: number, st: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "se",
            "type": "Effect"
          },
          {
            "id": "sp",
            "type": "number"
          },
          {
            "id": "st",
            "type": "number"
          }
        ],
        "desc": "SPSUMMON condition \"Must be Synchro Summoned\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "xyzlimit",
        "argstr": "e: Effect, se: Effect, sp: number, st: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "se",
            "type": "Effect"
          },
          {
            "id": "sp",
            "type": "number"
          },
          {
            "id": "st",
            "type": "number"
          }
        ],
        "desc": "SPSUMMON condition \"Must be Xyz Summoned\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "penlimit",
        "argstr": "e: Effect, se: Effect, sp: number, st: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "se",
            "type": "Effect"
          },
          {
            "id": "sp",
            "type": "number"
          },
          {
            "id": "st",
            "type": "number"
          }
        ],
        "desc": "SPSUMMON condition \"Must be Pendulum Summoned\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "damcon1",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Default condition for \"If you would take effect damage\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "qlifilter",
        "argstr": "e: Effect, te: Effect",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "te",
            "type": "Effect"
          }
        ],
        "desc": "Default filter used with \"Qli\" monsters for: \"Unaffected by activated monster effects whose original Rank/Level is lower than this card's Level\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "nvfilter",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Filter check \"not affected by Necrovalley\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "NecroValleyFilter",
        "argstr": "f: function)(Card target, ...",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "Filter check \"not affected by Necrovalley\" in addition to its own filter, if used as function filter, (Card target, ...) is defined by default",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "bfgcost",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number, chk: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          },
          {
            "id": "chk",
            "type": "number"
          }
        ],
        "desc": "Default SetCost for \"You can banish this card from your Graveyard\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "gbspcon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Default SetCondition for \"Summoned by a \"Gladiator Beast\" monster\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "evospcon",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Default SetCondition for \"Summoned by a \"Evolsaur\" monster\"",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "SpElimFilter",
        "argstr": "c: Card, mustbefaceup: boolean, includemzone: boolean",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "mustbefaceup",
            "type": "boolean"
          },
          {
            "id": "includemzone",
            "type": "boolean"
          }
        ],
        "desc": "Spirit Elimination check to (Card c). It checks if controller is affected by Spirit Elimination. If so, it will only filter in the Monster Zone, otherwise in Graveyard. (bool mustbefaceup) means the filter is not generic (e.g. Banish 1 Dragon-Type monster) opposed to banish 1 monster. (bool includemzone) when set to true will check LOCATION_MZONE by default as opposed to filtering LOCATION_MZONE and LOCATION_GRAVE depending on affected by Spirit Elimination.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AddEREquipLimit",
        "argstr": "c: Card, con: function|nil, equipval: function|nil, equipop: function, linkedeff: Effect, prop: number|nil, resetflag: number|nil, resetcount: number|nil",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "con",
            "type": "function|nil"
          },
          {
            "id": "equipval",
            "type": "function|nil"
          },
          {
            "id": "equipop",
            "type": "function"
          },
          {
            "id": "linkedeff",
            "type": "Effect"
          },
          {
            "id": "prop",
            "type": "number|nil"
          },
          {
            "id": "resetflag",
            "type": "number|nil"
          },
          {
            "id": "resetcount",
            "type": "number|nil"
          }
        ],
        "desc": "Registers effects that need to be checked for the effect of \"Millennium-Eyes Illusionist\". (function con) is any conditions that need to be fulfilled in order to apply its \"equipping\" effect. (function equipval) is the filter of valid monsters you can equip to it. (function equipop) is the equipping by its effect. (Effect linkedeff) is the effect that equips. (int prop) is the list of additional properties for SetProperty to register effects. (int resetflag) and (int resetcount) is used if the effect would reset such as, until only the End Phase."
      },
      {
        "id": "EquipByEffectAndLimitRegister",
        "argstr": "c: Card, e: Effect, tp: number, tc: Card, code: number|nil, mustbefaceup: boolean",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "tc",
            "type": "Card"
          },
          {
            "id": "code",
            "type": "number|nil"
          },
          {
            "id": "mustbefaceup",
            "type": "boolean"
          }
        ],
        "desc": "Equips (Card tc) to (Card c). Adding a (int code) will register that code as flag effect to the equipped card  (bool mustbefaceup) defines if the card to be equipped is required to be face-up.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ComposeNumberDigitByDigit",
        "argstr": "tp: number, min: number, max: number",
        "args": [
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          }
        ],
        "desc": "(int tp) declares a number by digit with a minimum of (int min) and maximum of (int max)",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ResetEffects",
        "argstr": "g: Group, eff: number",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "eff",
            "type": "number"
          }
        ],
        "desc": "Resets all effects with code (int eff) in a group of cards defined (Group g)."
      },
      {
        "id": "CallToken",
        "argstr": "code: number",
        "args": [
          {
            "id": "code",
            "type": "number"
          }
        ],
        "desc": "Function is used mostly for Anime Cards calling 419/420 to enable more functions. Also used in Anime Numbers with alias to prevent errors made by alias."
      },
      {
        "id": "SelectUnselectGroup",
        "argstr": "g: Group, e: Effect, tp: number, minc: number = 1, maxc: number = 99, rescon: function|nil, chk: number, seltp: number, hintmsg: number, cancelcon: function|nil, breakcon: function|nil",
        "args": [
          {
            "id": "g",
            "type": "Group"
          },
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "minc",
            "type": "number"
          },
          {
            "id": "maxc",
            "type": "number"
          },
          {
            "id": "rescon",
            "type": "function|nil"
          },
          {
            "id": "chk",
            "type": "number"
          },
          {
            "id": "seltp",
            "type": "number"
          },
          {
            "id": "hintmsg",
            "type": "number"
          },
          {
            "id": "cancelcon",
            "type": "function|nil"
          },
          {
            "id": "breakcon",
            "type": "function|nil"
          }
        ],
        "desc": "Recursion checking and selection. (Group g) is the group to check and choose from, with a minimum (int minc) that defaults to 1 if set to nil and maximum (int maxc) that defaults to 99 if set to nil. (function rescon) is the condition to check which is needed fulfill. (int chk) is set to 0 to check and 1 to select. (int seltp) is the selecting player. (int hintmsg) is the HINTMSG that will be displayed on selection. (function cancelcon) is the condition when fulfilled allows you to end selection. (function breakcon) when fulfilled ends the selection automatically.",
        "ret": [
          "boolean|Group"
        ]
      },
      {
        "id": "MZFilter",
        "argstr": "c: Card, tp: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Filter to check monsters if it's on a Main Monster Zone",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ChkfMMZ",
        "argstr": "sumcount: number)(Group sg, e: Effect, tp: number, mg: Group",
        "args": [
          {
            "id": "sumcount",
            "type": "number"
          },
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "mg",
            "type": "Group"
          }
        ],
        "desc": "Used in rescon by default. 2nd parenthesis is not required as rescon/cancelcon in aux.SelectUnselectGroup. (Group sg) is the selected group when using aux.SelectUnselectGroup.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RemainFieldCost",
        "argstr": "e: Effect, tp: number, eg: Group|nil, ep: number, ev: number, re: Effect, r: number, rp: number, chk: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group|nil"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          },
          {
            "id": "chk",
            "type": "number"
          }
        ],
        "desc": "cost that is used in cards that stay on the field if they finish resolving. (e.g. Kunai with Chain, Different Dimension Burial)",
        "ret": [
          "boolean|void"
        ]
      },
      {
        "id": "MainAndExtraSpSummonLoop",
        "argstr": "func: function|nil, sumtype: number, sump: number, targetp: number, nocheck: boolean, nolimit: boolean, pos: number, mmz: number, emz: number)(Effect e, tp: number, eg: Group, ep: number, ev: number, re: Effect, r: number, rp: number, sg: Group",
        "args": [
          {
            "id": "func",
            "type": "function|nil"
          },
          {
            "id": "sumtype",
            "type": "number"
          },
          {
            "id": "sump",
            "type": "number"
          },
          {
            "id": "targetp",
            "type": "number"
          },
          {
            "id": "nocheck",
            "type": "boolean"
          },
          {
            "id": "nolimit",
            "type": "boolean"
          },
          {
            "id": "pos",
            "type": "number"
          },
          {
            "id": "mmz",
            "type": "number"
          },
          {
            "id": "emz",
            "type": "number"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          },
          {
            "id": "sg",
            "type": "Group"
          }
        ],
        "desc": "Loops Special Summoning (Group sg) to ensure they go in a valid zone (Extra Moster Zone and Main Monster Zones) where (function func) is a function called after each card in the Group is summoned with the parameters (Effect e, int tp, Group eg, int ep,int ev, Effect re, int r, int rp, Card sc) where (Card sc) is the card that's Summoned. (int sumtype) is the Summon Type. (int sump) is the Summoning player. (int targetp) is the target player. (bool nocheck) checks for \"ignoring the Summoning conditions\". And (bool nolimit) checks for \"ignoring proper Summon\". (int pos) is the position to be Summoned. (int mmz) is the zones where you can Special Summon monsters in (Group sg) to the Main Monster Zone, which defaults to all Main Monster Zones if there is no input or nil is inputed. (int emz) on the other is similar to (int mmz) excepts it checks for cards from the Extra Deck which Special Summons to the Extra Monster Zone.",
        "ret": [
          "boolean",
          "Group"
        ]
      },
      {
        "id": "AddUnionProcedure",
        "argstr": "c: Card, f: function, oldrule: boolean",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "oldrule",
            "type": "boolean"
          }
        ],
        "desc": "Adds the Union Procedure to (Card c) where (function f) is the cards you can equip the Union monster to, and (bool oldrule) is a check to apply old rulings of the Union monster."
      },
      {
        "id": "IsUnionState",
        "argstr": "effect: Effect",
        "args": [
          {
            "id": "effect",
            "type": "Effect"
          }
        ],
        "desc": "Used as a default condition to check if the handler of the effect is a Union monster equipped to another monster.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckUnionEquip",
        "argstr": "uc: Card, tc: Card",
        "args": [
          {
            "id": "uc",
            "type": "Card"
          },
          {
            "id": "tc",
            "type": "Card"
          }
        ],
        "desc": "A check if you can equip a Union monster (Card uc) to (Card tc).",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "AddEquipProcedure",
        "argstr": "c: Card, p: number|nil, f: function|nil, eqlimit: function|nil, cost: function|nil, tg: function|nil, op: function|nil, con: function|nil",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "p",
            "type": "number|nil"
          },
          {
            "id": "f",
            "type": "function|nil"
          },
          {
            "id": "eqlimit",
            "type": "function|nil"
          },
          {
            "id": "cost",
            "type": "function|nil"
          },
          {
            "id": "tg",
            "type": "function|nil"
          },
          {
            "id": "op",
            "type": "function|nil"
          },
          {
            "id": "con",
            "type": "function|nil"
          }
        ],
        "desc": "Adds the Equip Card Activation where (int p) is the player, setting 0 will limit to monsters you control, setting to 1 will be your opponent and PLAYER_ALL/nil will be for either player. (function f) is the filters on which monsters you can equip it to. (function eqlimit) if provided will that limitation on which monsters you can only equip it (e.g. Those that can only be equipped by this activation, e.g. Train Connection). (function cost) would be the cost to activate it. (function tg) are effects that applied to it after targeting the monster to equip, and also checking requirements. (function op) is any operation that is applied after the Equip Proc equips. (function con) returns a bool which are conditions that need to be fulfilled for the Equip Card to be activated."
      },
      {
        "id": "EquipEquip",
        "argstr": "e: Effect, tp: number, eg: Group, ep: number, ev: number, re: Effect, r: number, rp: number",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "tp",
            "type": "number"
          },
          {
            "id": "eg",
            "type": "Group"
          },
          {
            "id": "ep",
            "type": "number"
          },
          {
            "id": "ev",
            "type": "number"
          },
          {
            "id": "re",
            "type": "Effect"
          },
          {
            "id": "r",
            "type": "number"
          },
          {
            "id": "rp",
            "type": "number"
          }
        ],
        "desc": "Used to equip the Equip Card to the targeted monster. This would be used if you cannot use the Equip Procedure for your Equip Card activation."
      },
      {
        "id": "AddPersistentProcedure",
        "argstr": "c: Card, p: number|nil, f: function|nil, category: number|nil, property: number|nil, hint1: number|nil, hint2: number|nil, con: function|nil, cost: function|nil, tg: function|nil, op: function|nil, anypos: boolean|nil",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "p",
            "type": "number|nil"
          },
          {
            "id": "f",
            "type": "function|nil"
          },
          {
            "id": "category",
            "type": "number|nil"
          },
          {
            "id": "property",
            "type": "number|nil"
          },
          {
            "id": "hint1",
            "type": "number|nil"
          },
          {
            "id": "hint2",
            "type": "number|nil"
          },
          {
            "id": "con",
            "type": "function|nil"
          },
          {
            "id": "cost",
            "type": "function|nil"
          },
          {
            "id": "tg",
            "type": "function|nil"
          },
          {
            "id": "op",
            "type": "function|nil"
          },
          {
            "id": "anypos",
            "type": "boolean|nil"
          }
        ],
        "desc": "Adds the Persistent Trap Procedure where is the player, setting 0 will limit to monsters you control, setting to 1 will be your opponent and PLAYER_ALL/nil will be for either player. (function f) is the filters on which monsters you can target. (bool anypos) is a check if the target needs to be face-up. Setting this to true will allow it to be targeted even if it isn't face-up."
      },
      {
        "id": "PersistentTargetFilter",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Default filter for checking if it's targeted by the Persistent Trap.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "dncheck",
        "desc": "Checks for cards with different names (to be used with aux.SelectUnselectGroup)",
        "ret": [
          "function"
        ]
      },
      {
        "id": "ReincarnationCheckValue",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Auxiliary function for \"Salamangreat\" Reincarnation procedure. Registers CARD_SALAMANGREAT_SANCTUARY as flag  to (card c) if it is either a Link, Fusion or Ritual and has among its materials a card with the same ID as (card c).",
        "ret": [
          "function"
        ]
      },
      {
        "id": "ReincarnationRitualFilter",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Auxiliary filter for \"Salamangreat\" Reincarnation procedure to handle the rituals.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ReincarnationCheckTarget",
        "argstr": "e: Effect, c: Card",
        "args": [
          {
            "id": "e",
            "type": "Effect"
          },
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Auxiliary function for \"Salamangreat\" Reincarnation procedure. Returns if (card c) is either a Fusion, Ritual or a Link.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "EnableCheckReincarnation",
        "argstr": "c: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          }
        ],
        "desc": "Auxiliary function for \"Salamangreat\" Reincarnation procedure. Enables reincarnation links."
      },
      {
        "id": "MaleficUniqueFilter",
        "argstr": "c: c",
        "args": [
          {
            "id": "c",
            "type": "c"
          }
        ],
        "desc": "Used as filter for the uniqueness on field with the \"Malefic\" monsters",
        "ret": [
          "function"
        ]
      },
      {
        "id": "AddMaleficSummonProcedure",
        "argstr": "c, e: cod, c: lo",
        "args": [
          {
            "id": "c",
            "type": ""
          },
          {
            "id": "e",
            "type": "cod"
          },
          {
            "id": "c",
            "type": "lo"
          }
        ],
        "desc": "Procedure for \"Malefic\" monsters' Special Summon (also includes handling of \"Malefic Paradox Gear\"'s effect)",
        "ret": [
          "function"
        ]
      },
      {
        "id": "MaleficSummonFilter",
        "argstr": "c, d: c",
        "args": [
          {
            "id": "c",
            "type": ""
          },
          {
            "id": "d",
            "type": "c"
          }
        ],
        "desc": "Filter used with AddMaleficSummonProcedure. Returns if card (Card c)'s ID is (cd) and if c can be banished as cost",
        "ret": [
          "function"
        ]
      },
      {
        "id": "MaleficSummonSubstitute",
        "argstr": "c, d: c",
        "args": [
          {
            "id": "c",
            "type": ""
          },
          {
            "id": "d",
            "type": "c"
          }
        ],
        "desc": "Used with the Summoning Procedure of \"Malefic\" monsters. Checks for the effect of \"Malefic Paradox Gear\"",
        "ret": [
          "function"
        ]
      },
      {
        "id": "MaleficSummonCondition",
        "argstr": "d: c, c: lo",
        "args": [
          {
            "id": "d",
            "type": "c"
          },
          {
            "id": "c",
            "type": "lo"
          }
        ],
        "desc": "Auxiliary function for the summoning procedure of \"Malefic\" monsters. Checks if the player has the zone to summon and the appropriate monster (cd) to banish.",
        "ret": [
          "function"
        ]
      },
      {
        "id": "MaleficSummonOperation",
        "argstr": "d: c, c: lo",
        "args": [
          {
            "id": "d",
            "type": "c"
          },
          {
            "id": "c",
            "type": "lo"
          }
        ],
        "desc": "Auxiliary function to handle the summoning procedure of \"Malefic\" monsters. Performs the actual summon of the monster by removing the appropriate monster.",
        "ret": [
          "function "
        ]
      },
      {
        "id": "zptfilter",
        "argstr": "r: filte",
        "args": [
          {
            "id": "r",
            "type": "filte"
          }
        ],
        "desc": "Used as filter for effects that check \"if [filter] monster is Special Summoned to a zone this card points to\". Also includes non-trivial handling of self-destructing effects of \"Burning Abyss\" monsters.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "zptcon",
        "argstr": "r: filte",
        "args": [
          {
            "id": "r",
            "type": "filte"
          }
        ],
        "desc": "Used as condition for effects that check \"if a [filter] monster is Special Summoned to a zone this card points to\". Includes non-trivial handling of self-destructing Burning Abyss monsters. tp is passed to check control.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "WitchcrafterDiscardFilter",
        "argstr": "c",
        "args": [
          {
            "id": "c",
            "type": ""
          }
        ],
        "desc": "Auxiliary function for the discard cost of \"Witchcrafter\" monsters. Returns if (Card c) can be either sent to the GY as a cost or has EFFECT_WITCHCRAFT_REPLACE.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "WitchcrafterDiscardGroup",
        "argstr": "c: min",
        "args": [
          {
            "id": "c",
            "type": "min"
          }
        ],
        "desc": "Auxiliary function for the discard cost of \"Witchcrafter\" monsters. Returns if there is a card with EFFECT_WITCHCRAFTER_REPLACE, that can be used as the whole cost, of if there is a (minc) number of cards to use as cost,  minc is the ammount the effect requires to discard.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "WitchcrafterDiscardCost",
        "argstr": "f, c: min, c: max",
        "args": [
          {
            "id": "f",
            "type": ""
          },
          {
            "id": "c",
            "type": "min"
          },
          {
            "id": "c",
            "type": "max"
          }
        ],
        "desc": "Auxiliary function for the discard cost of \"Witchcrafter\" monsters. Performs the actual discard part, considering a minimum (minc) and maximum (maxc) amount of cards to discard. It also handles cards with EFFECT_WITCHCRAFTER_REPLACE, setting the reason for REASON_COST for those, or REASON_COST+REASON_DISCARD if a card is sent from hand instead."
      },
      {
        "id": "AddLavaProcedure",
        "argstr": "c: card, required: number, position: number, filter: funtion, value: number, description: number",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "required",
            "type": "number"
          },
          {
            "id": "position",
            "type": "number"
          },
          {
            "id": "filter",
            "type": "funtion"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "description",
            "type": "number"
          }
        ],
        "desc": "Adds Lava Golem-like procedure (monster that tribute to Special Summon on opponent's field), int required is the amount of monster to tribute, position is which position is it summoned and filter specify the monster it must tribute, value sets the type of Special summon and description adds a description for it. Calls the following auxiliary functions: LavaCondition, LavaCheck, LavaTarget and LavOperation.",
        "ret": [
          "effect"
        ]
      },
      {
        "id": "AddKaijuProcedure",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "Adds Kaiju's stardand procedure to the monster (which also includes the uniqueness on field condition). Calls the following auxilary function: KaijuCondition",
        "ret": [
          "effect",
          "effect"
        ]
      },
      {
        "id": "IsZone",
        "argstr": "c: card, zone: number, tp: number",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "zone",
            "type": "number"
          },
          {
            "id": "tp",
            "type": "number"
          }
        ],
        "desc": "Returns if (card c) is in the (int zone), (int tp) is the reference player.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ToHandOrElse",
        "argstr": "c: card, player: number,  [check: function, oper: function, r: st], ...",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "check",
            "type": "function"
          },
          {
            "id": "oper",
            "type": "function",
            "opt": true
          },
          {
            "id": "r",
            "type": "st",
            "opt": true
          },
          {
            "id": "...",
            "type": "",
            "opt": true
          }
        ],
        "desc": "Makes (int player) either add (card c) to hand or perform a secondary action. If the optional parameters are not provided, the default secondary action is to send (card c) to the GY. If  the provided (function check) is true, the secondary action, with string called from (str), will be the one defined in (function oper)."
      },
      {
        "id": "thoeSend",
        "argstr": "c: card",
        "args": [
          {
            "id": "c",
            "type": "card"
          }
        ],
        "desc": "Sends (card c) to the grave. Function added to be used with aux.ToHandOrElse"
      },
      {
        "id": "RegisterClientHint",
        "argstr": "c: Card, property_code: number, reg: number.player, s: number, o: number, r: st, reset_code: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "property_code",
            "type": "number"
          },
          {
            "id": "reg",
            "type": "number"
          },
          {
            "id": "s",
            "type": "number"
          },
          {
            "id": "o",
            "type": "number"
          },
          {
            "id": "r",
            "type": "st"
          },
          {
            "id": "reset_code",
            "type": "number"
          }
        ],
        "desc": "Auxiliary function to simplify registering EFFECT_FLAG_CLIENT_HINT to players. (Card c) is card that creates the hint message,  (int property_code) are additional properties like EFFECT_FLAG_OATH (PLAYER_TARGET and CLIENT_HINT are the flags registered by default). (int reg. player) is the player that is registering the hint, to himself (int s) and/or the opponent (int o), with a description called from a string defined in (str). Additional resets, other than the default RESET_PHASE+PHASE_END, can be passed in (int reset_code)."
      },
      {
        "id": "PlayFieldSpell",
        "argstr": "c: Card, e, p: t, g: e, p: e, v: e, e: r, r, p: r",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "e",
            "type": ""
          },
          {
            "id": "p",
            "type": "t"
          },
          {
            "id": "g",
            "type": "e"
          },
          {
            "id": "p",
            "type": "e"
          },
          {
            "id": "v",
            "type": "e"
          },
          {
            "id": "e",
            "type": "r"
          },
          {
            "id": "r",
            "type": ""
          },
          {
            "id": "p",
            "type": "r"
          }
        ],
        "desc": "Activates a field spell Card \"c\". Already handles interactions with Field Spells that are already face up, rules for only 1 Field Spell at time, checks for costs and activated effects of the field spell and als the interaction with Ancient Pixie Dragon.",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "GlobalCheck",
        "argstr": "s, func: function",
        "args": [
          {
            "id": "s",
            "type": ""
          },
          {
            "id": "func",
            "type": "function"
          }
        ],
        "desc": "Enables a global check to be used with function \"func\""
      },
      {
        "id": "EvilHeroLimit",
        "argstr": "e, e: s, p: s, t: s",
        "args": [
          {
            "id": "e",
            "type": ""
          },
          {
            "id": "e",
            "type": "s"
          },
          {
            "id": "p",
            "type": "s"
          },
          {
            "id": "t",
            "type": "s"
          }
        ],
        "desc": "Default SetValue for \"Evil HERO\" monsters's effect EFFECT_SPSUMMON_CONDITION. Must be used due to the existance of \"Supreme King Castle\"",
        "ret": [
          "number"
        ]
      },
      {
        "id": "ReleaseNonSumCheck",
        "argstr": "c: card, player: number, e: effect",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "e",
            "type": "effect"
          }
        ],
        "desc": "Auxiliary function called by \"Duel.CheckReleaseGroupSummon\" and Duel.SelectReleaseGroupSummon\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ZoneCheckFunc",
        "argstr": "c: card, player: number, zone: number",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "zone",
            "type": "number"
          }
        ],
        "desc": "Auxiliary function called by \"Duel.CheckReleaseGroupSummon\" and Duel.SelectReleaseGroupSummon\".",
        "ret": [
          "number"
        ]
      },
      {
        "id": "CheckZonesReleaseSummonCheck",
        "argstr": "must: group, oneof: group, checkfunc: function",
        "args": [
          {
            "id": "must",
            "type": "group"
          },
          {
            "id": "oneof",
            "type": "group"
          },
          {
            "id": "checkfunc",
            "type": "function"
          }
        ],
        "desc": "Auxiliary function called by \"Duel.SelectReleaseGroupSummon\".",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "CheckZonesReleaseSummonCheckSelection",
        "argstr": "must: group, oneof: group, checkfunc: function",
        "args": [
          {
            "id": "must",
            "type": "group"
          },
          {
            "id": "oneof",
            "type": "group"
          },
          {
            "id": "checkfunc",
            "type": "function"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ReleaseCostFilter",
        "argstr": "c: card, f: function, ...",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ReleaseCheckSingleUse",
        "argstr": "sg: group, player: number, exg: group",
        "args": [
          {
            "id": "sg",
            "type": "group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "exg",
            "type": "group"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ReleaseCheckMMZ",
        "argstr": "sg: group, player: number",
        "args": [
          {
            "id": "sg",
            "type": "group"
          },
          {
            "id": "player",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "ReleaseCheckTarget",
        "argstr": "sg: group, player: number, exg: group, dg: group",
        "args": [
          {
            "id": "sg",
            "type": "group"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "exg",
            "type": "group"
          },
          {
            "id": "dg",
            "type": "group"
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RelCheckRecursive",
        "argstr": "c: card, player: number, sg: group, mg: group, exg: group, mustg: group, count: number, min: number, specialchk: function, ...",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "sg",
            "type": "group"
          },
          {
            "id": "mg",
            "type": "group"
          },
          {
            "id": "exg",
            "type": "group"
          },
          {
            "id": "mustg",
            "type": "group"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "specialchk",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "RelCheckGoal",
        "argstr": "player: number, sg: group, exg: group, mustg: group, count: number, min: number, specialchk: function, ...",
        "args": [
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "sg",
            "type": "group"
          },
          {
            "id": "exg",
            "type": "group"
          },
          {
            "id": "mustg",
            "type": "group"
          },
          {
            "id": "count",
            "type": "number"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "specialchk",
            "type": "function"
          },
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "BitSplit",
        "argstr": "number: number",
        "args": [
          {
            "id": "number",
            "type": "number"
          }
        ],
        "desc": "Auxiliary function to help printing hints for attribute-related cards such as Cynet Codec",
        "ret": [
          "table"
        ]
      },
      {
        "id": "GetAttributeStrings",
        "argstr": "number: number",
        "args": [
          {
            "id": "number",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "table"
        ]
      },
      {
        "id": "GetRaceStrings",
        "argstr": "number: number",
        "args": [
          {
            "id": "number",
            "type": "number"
          }
        ],
        "desc": "",
        "ret": [
          "table"
        ]
      },
      {
        "id": "tableOR",
        "argstr": "...",
        "args": [
          {
            "id": "...",
            "type": ""
          }
        ],
        "desc": "",
        "ret": [
          "table"
        ]
      }
    ]
  },
  {
    "cls": "Fusion",
    "methods": [
      {
        "id": "AddProcMix",
        "argstr": "c: Card, sub: boolean, insf: boolean, ...: number|function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sub",
            "type": "boolean"
          },
          {
            "id": "insf",
            "type": "boolean"
          },
          {
            "id": "...",
            "type": "number|function"
          }
        ],
        "desc": "Adds a Fusion Procedure where (bool sub) is a check if Fusion Substitutes are allowed. (bool insf) is a check if using no materials are allowed (e.g. Instant Fusion). (int|function ...) is a list of any number of codes/conditions as Fusion Materials."
      },
      {
        "id": "CheckExact",
        "desc": "A variable used temporarily to limit the usable materials' number",
        "ret": [
          "nil|number"
        ]
      },
      {
        "id": "CheckAdditional",
        "desc": "A variable used temporarily to add further checks (e.g. only up to 2 materials from the Extra Deck: Odd-Eyes Fusion)",
        "ret": [
          "nil|function"
        ]
      },
      {
        "id": "AddProcMixRep",
        "argstr": "c: Card, sub: boolean, insf: boolean, fun1: function, minc: number, maxc: number, ...: number|function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sub",
            "type": "boolean"
          },
          {
            "id": "insf",
            "type": "boolean"
          },
          {
            "id": "fun1",
            "type": "function"
          },
          {
            "id": "minc",
            "type": "number"
          },
          {
            "id": "maxc",
            "type": "number"
          },
          {
            "id": "...",
            "type": "number|function"
          }
        ],
        "desc": "Adds a Fusion Procedure where (bool sub) is a check if Fusion Substitutes are allowed. (bool insf) is a check if using no materials are allowed (e.g. Instant Fusion). (function fun1) is a condition for a Fusion Material with a minimum (int minc) and maximum (int maxc) and (int|function ...) is a list of any number of codes/conditions as Fusion Materials."
      },
      {
        "id": "AddContactProc",
        "argstr": "c: Card, group: function, op: function, sumcon: function, condition: function|nil, sumtype: number = 0, desc: number|nil",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "group",
            "type": "function"
          },
          {
            "id": "op",
            "type": "function"
          },
          {
            "id": "sumcon",
            "type": "function"
          },
          {
            "id": "condition",
            "type": "function|nil"
          },
          {
            "id": "sumtype",
            "type": "number"
          },
          {
            "id": "desc",
            "type": "number|nil"
          }
        ],
        "desc": "Adds a Contact Fusion Procedure to a Fusion monster which is a Summoning Procedure without having to use \"Polymerization\". (function group) is a function with (int tp) parameter which returns a Group of usable materials. (function op) is the operation that will be applied to the selected materials. (function sumcon) adds a limitation on a Fusion monster which applies to EFFECT_SPSUMMON_CONDITION. (function condition) is an additional condition to check. (int sumtype) is the Summon Type of the Contact Fusion, which defaults to 0. (int desc) is the description of the Summoning Procedure when selecting it."
      },
      {
        "id": "AddProcMixN",
        "argstr": "c: Card, sub: boolean, insf: boolean, n: number|functio, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sub",
            "type": "boolean"
          },
          {
            "id": "insf",
            "type": "boolean"
          },
          {
            "id": "n",
            "type": "number|functio"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Adds a Fusion Procedure where (bool sub) is a check if Fusion Substitutes are allowed. (bool insf) is a check if using no materials are allowed (e.g. Instant Fusion). (int|function ...) is a list of any number of codes/conditions as Fusion Materials, by pairs wherein the first value is int/function which is the code or condition, and the second value is an int which corresponds to the number of fixed materials."
      },
      {
        "id": "AddShaddolProcMix",
        "argstr": "c: Card, insf: boolean, f: function, att: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "insf",
            "type": "boolean"
          },
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "att",
            "type": "number"
          }
        ],
        "desc": "Adds a Fusion Procedure where (bool insf) is a check if using no materials are allowed (e.g. Instant Fusion) and accepts 1 condition (function f) and 1 Attribute (int att)."
      },
      {
        "id": "CreateSummonEff",
        "argstr": "c: card, fusfilter: function, matfilter: function, extrafil: function , p: extrao, c: g, stage2: function, exactcount: number, value: number, location: number, f: chk, desc: string",
        "args": [
          {
            "id": "c",
            "type": "card"
          },
          {
            "id": "fusfilter",
            "type": "function"
          },
          {
            "id": "matfilter",
            "type": "function"
          },
          {
            "id": "extrafil",
            "type": "function"
          },
          {
            "id": "p",
            "type": "extrao"
          },
          {
            "id": "c",
            "type": "g"
          },
          {
            "id": "stage2",
            "type": "function"
          },
          {
            "id": "exactcount",
            "type": "number"
          },
          {
            "id": "value",
            "type": "number"
          },
          {
            "id": "location",
            "type": "number"
          },
          {
            "id": "f",
            "type": "chk"
          },
          {
            "id": "desc",
            "type": "string"
          }
        ],
        "desc": "Function that generates a Fusion Summon effect called from the fusion summon procedure defines in \"proc_fusion.lua\" and \"proc_fusion2.lua\". By default it's usable for Spells/Traps, usage in monsters requires changing type and code afterwards. Card c is card that uses the effect, fusfilter is the filter for the monster to be Fusion Summoned, matfilter is a function with the restrictions on the default materials returned by GetFusionMaterial,  extrafil is a function that returns a group of extra cards that can be used as fusion materials, and as second optional parameter an additional filter function, extraop is function called right before sending the monsters to the graveyard as material, gc is mandatory card or function returning a group to be used (for effects like Soprano the Melodious Songtress), stage2 is a function called after the monster has been summoned (Shaddol Ruq, Instant Fusion, Flash Fusion, etc.), exactcount is the exact number of materials that must be used if the effect requires it (e.g. Ostinato), int location is the location where to summon fusion monsters from (default LOCATION_EXTRA), chkf are FUSPROC flags for the fusion summon, desc calls a string for the summon effect description.",
        "ret": [
          "effect"
        ]
      }
    ]
  },
  {
    "cls": "Ritual",
    "methods": [
      {
        "id": "AddProcGreater",
        "argstr": "c: Card, filter: function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "filter",
            "type": "function"
          }
        ],
        "desc": "Adds a Ritual Summoning activation requring Tributes that meet (function filter), and with levels equal to or greater than the Ritual Monster's level"
      },
      {
        "id": "AddProcGreaterCode",
        "argstr": "c: Card, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Adds a Ritual Summoning activation requring Tributes for a Ritual monster with any of the card names of code (int ...), and with levels equal to or greater than the Ritual Monster's level"
      },
      {
        "id": "AddProcEqual",
        "argstr": "c: Card, filter: function, lv: number[, desc: number]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "filter",
            "type": "function"
          },
          {
            "id": "lv",
            "type": "number"
          },
          {
            "id": "desc",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Adds a Ritual Summoning activation, requring Tributes that meet (function filter), and with levels exactly equal to the Ritual Monster's level or if (int lv) is provided, with level equal to that value. (int desc) is the description when activating the Ritual Spell."
      },
      {
        "id": "AddProcEqualCode",
        "argstr": "c: Card, lv: number, desc: number, ...: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "lv",
            "type": "number"
          },
          {
            "id": "desc",
            "type": "number"
          },
          {
            "id": "...",
            "type": "number"
          }
        ],
        "desc": "Adds a Ritual Summoning activation, requring Tributes with any of the card names of code (int ...), and with levels exactly equal to the Ritual Monster's level or if (int lv) is provided, with level equal to that value. (int desc) is the description when activating the Ritual Spell when provided."
      }
    ]
  },
  {
    "cls": "Synchro",
    "methods": [
      {
        "id": "NonTuner",
        "argstr": "f: function, a, b, c",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "a",
            "type": ""
          },
          {
            "id": "b",
            "type": ""
          },
          {
            "id": "c",
            "type": ""
          }
        ],
        "desc": "A filter used in a Synchro procedure when a material is supposed to be non-Tuner. It also has to satisfy condition of (function f) if provided with (a, b, c) parameters.",
        "ret": [
          "function"
        ]
      },
      {
        "id": "NonTunerEx",
        "argstr": "f: function, val: number",
        "args": [
          {
            "id": "f",
            "type": "function"
          },
          {
            "id": "val",
            "type": "number"
          }
        ],
        "desc": "A filter used in a Synchro procedure when a material is supposed to be non-Tuner. It also has to satisfy condition of (function f) which has to be Card.IsRace, Card.IsAttribute or Card.IsType, or a function that would use any of these 3. Also, (int val) is a parameter that is used in checking the (function f).",
        "ret": [
          "function"
        ]
      },
      {
        "id": "AddProcedure",
        "argstr": "c: Card, f1: function, min1: number, max1: number, f2: function, min2: number, max2: number, sub1: function, sub2: function, req1: function, reqct1: number, req2: function, reqct2: number, reqm: function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "min1",
            "type": "number"
          },
          {
            "id": "max1",
            "type": "number"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "min2",
            "type": "number"
          },
          {
            "id": "max2",
            "type": "number"
          },
          {
            "id": "sub1",
            "type": "function"
          },
          {
            "id": "sub2",
            "type": "function"
          },
          {
            "id": "req1",
            "type": "function"
          },
          {
            "id": "reqct1",
            "type": "number"
          },
          {
            "id": "req2",
            "type": "function"
          },
          {
            "id": "reqct2",
            "type": "number"
          },
          {
            "id": "reqm",
            "type": "function"
          }
        ],
        "desc": "Adds a Synchro Procedure to (Card c) where (function f1) is the required Tuner, with a minimum (int min1) and maximum (int max1). (function f2) is the second material (which usually is a non-Tuner, with a minimum (int min2) and maximum (int max2). (function sub1) is a Tuner substitute (e.g. Nirvana High Paladin) while (function sub2) is a substitute to the second material(s). (function req1) are required Tuners to be used in that Summon, with a fixed number (int reqct1) on how many are needed to be used. (function req2) follows the same pattern but for the secondary material (e.g. Crystal Wing Synchro Dragon (Anime)). (function reqm) is the required material needed to be used in that Summon regardless if it's a Tuner or the second material (e.g. function overwrite by Blackwing - Gofu the Vague Shadow (Anime))."
      },
      {
        "id": "Send",
        "desc": "a number representing how and where the Synchro Materials would be sent. 0 - (default) to grave, 1- to grave, returned from banished, 2 - banished face-up, 3 - banished face-down, 4 - sent to hand, 5, sent to Deck, 6 - destroyed.",
        "ret": [
          "number"
        ]
      },
      {
        "id": "AddMajesticProcedure",
        "argstr": "c: Card, f1: function, cbt1: boolean, f2: function, cbt2: boolean, f3: function, cbt3: boolean, ...: function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "cbt1",
            "type": "boolean"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "cbt2",
            "type": "boolean"
          },
          {
            "id": "f3",
            "type": "function"
          },
          {
            "id": "cbt3",
            "type": "boolean"
          },
          {
            "id": "...",
            "type": "function"
          }
        ],
        "desc": "Adds a Synchro Procedure to (Card c) used by Majestic Star Dragon where (function f1, f2 and f3) are the required material and (bool cbt1, cbt2 and cbt3) are a check if the respective material can be used as the Tuner in the Summon since rulings for Majestic Star/Red Dragon state that either or both Majestic Dragon (f1) and/or Stardust Dragon/Red Dragon Archfiend (f2) can be used as the Tuner, but the non-Tuner, for the case of using Phantom King Hydride (f3) cannot be treated as the Tuner for the Summon. You require a minimum of 1 among these 3 to be the Tuner. (function ...) is the list of required materials during the Summon."
      },
      {
        "id": "AddDarkSynchroProcedure",
        "argstr": "c: Card, f1: function, f2: function, plv: number, nlv: number, ...: function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f1",
            "type": "function"
          },
          {
            "id": "f2",
            "type": "function"
          },
          {
            "id": "plv",
            "type": "number"
          },
          {
            "id": "nlv",
            "type": "number"
          },
          {
            "id": "...",
            "type": "function"
          }
        ],
        "desc": "Adds a Synchro Procedure to (Card c) used by Dark Synchros where (function f1) is the first material, usually used by the non-Tuner and (function f2) as the Dark Tuner, whose Level to be subtracted from the first material. (int plv) is the target level when both materials are of positive value while (int nlv) is the target value if the first material is affected by Dark Wave. (int plv) defaults to the Synchro monster's level while (int nlv) defaults to the (int plv) if not supplied. (function ...) is the list of required materials during the Summon."
      }
    ]
  },
  {
    "cls": "Xyz",
    "methods": [
      {
        "id": "AddProcedure",
        "argstr": "c: Card, f: function|nil, lv: number|nil, ct: number, alterf: f|nil, desc: number, maxct: number=ct, op: function, mustbemat: boolean, exchk: function",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f",
            "type": "function|nil"
          },
          {
            "id": "lv",
            "type": "number|nil"
          },
          {
            "id": "ct",
            "type": "number"
          },
          {
            "id": "alterf",
            "type": "f|nil"
          },
          {
            "id": "desc",
            "type": "number"
          },
          {
            "id": "maxct",
            "type": "number"
          },
          {
            "id": "op",
            "type": "function"
          },
          {
            "id": "mustbemat",
            "type": "boolean"
          },
          {
            "id": "exchk",
            "type": "function"
          }
        ],
        "desc": "Adds an Xyz Procedure where (function f) is the required Xyz Material, and (int lv) is the required level, but it can also be nil if there is no required Level. (int ct) is the required number of materials. (function alterf) is the alternate material, e.g. Number C39: Utopia Ray. (int desc) is the description shown when attempting to Xyz Summon using (function alterf). (int maxct) is the maximum number of materials, which defaults to (int ct). (function op) is used by some monsters do something else in addition to using an Xyz Material (e.g. Digital Bug Corebage (detach 2 materials) or Number 99: Utopic Dragon (discard 1 \"Rank-Up-Magic\")). (bool mustbemat) is used if you can only use the listed materials during the Xyz Summon, this disallows Anime effects such as Orichalcum Chain (minus 1 material) or Triangle Evolution (triple material). (function exchk) is an additional check at the end of selecting materials (e.g. Number F0: Utopic Future (checks if the materials have the same Rank)"
      }
    ]
  },
  {
    "cls": "Pendulum",
    "methods": [
      {
        "id": "AddProcedure",
        "argstr": "c: Card[, reg: boolean=true, desc: number|nil]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "reg",
            "type": "boolean",
            "opt": true
          },
          {
            "id": "desc",
            "type": "number|nil",
            "opt": true
          }
        ],
        "desc": "Applies all the effects necessary for a Pendulum card to be used as one to (Card c). Setting (bool reg) to false, will not register the activation effect, which is used in cards that cannot be activated since you don't have them in your hand (e.g. Xyz/Pendulums). (int desc) is an optional parameter adding a description to your Pendulum Activation."
      }
    ]
  },
  {
    "cls": "Link",
    "methods": [
      {
        "id": "AddProcedure",
        "argstr": "c: Card, f: function|nil, min: number, max: number = c:GetLink(), specialchk: function|nil, desc: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "f",
            "type": "function|nil"
          },
          {
            "id": "min",
            "type": "number"
          },
          {
            "id": "max",
            "type": "number"
          },
          {
            "id": "specialchk",
            "type": "function|nil"
          },
          {
            "id": "desc",
            "type": "number"
          }
        ],
        "desc": "Adds a Link Procedure where (function f) is the required material with a minimum (int min) and maximum (int max) where (function specialchk) is an additional check after obtaining all materials (e.g. Akashic Magician) and (int desc) is the description to its Link Summoning Procedure,"
      }
    ]
  },
  {
    "cls": "Debug",
    "methods": [
      {
        "id": "Message",
        "argstr": "msg: any",
        "args": [
          {
            "id": "msg",
            "type": "any"
          }
        ],
        "desc": "Sends (any msg) as a script error to the logs"
      },
      {
        "id": "AddCard",
        "argstr": "code: number, owner: number, player: number, location: number, seq: number, pos: number[, proc: boolean=false]",
        "args": [
          {
            "id": "code",
            "type": "number"
          },
          {
            "id": "owner",
            "type": "number"
          },
          {
            "id": "player",
            "type": "number"
          },
          {
            "id": "location",
            "type": "number"
          },
          {
            "id": "seq",
            "type": "number"
          },
          {
            "id": "pos",
            "type": "number"
          },
          {
            "id": "proc",
            "type": "boolean",
            "opt": true
          }
        ],
        "desc": "Add a card of (int code), owned by (int owner) and under (int player)'s control, to (int seq) of (int location) in (int pos) position. If (bool proc) is true, it will be treated as properly summoned for the purposes of revive limits.",
        "ret": [
          "Card"
        ]
      },
      {
        "id": "SetPlayerInfo",
        "argstr": "playerid: number, lp: number, startcount: number, drawcount: number",
        "args": [
          {
            "id": "playerid",
            "type": "number"
          },
          {
            "id": "lp",
            "type": "number"
          },
          {
            "id": "startcount",
            "type": "number"
          },
          {
            "id": "drawcount",
            "type": "number"
          }
        ],
        "desc": "Set (int playerid) to have (int lp) LP, start with a (in startct) card hand, and draw (int drawcount) during the Draw Phase."
      },
      {
        "id": "PreSummon",
        "argstr": "c: Card, sum_type: number[, sum_location: number=0]",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "sum_type",
            "type": "number"
          },
          {
            "id": "sum_location",
            "type": "number",
            "opt": true
          }
        ],
        "desc": "Treat (Card c) as if it was summoned by (int sum_type), to (int sum_location)"
      },
      {
        "id": "PreEquip",
        "argstr": "equip_card: Card, target: Card",
        "args": [
          {
            "id": "equip_card",
            "type": "Card"
          },
          {
            "id": "target",
            "type": "Card"
          }
        ],
        "desc": "Equip (Card equip_card) to (Card target)",
        "ret": [
          "boolean"
        ]
      },
      {
        "id": "PreSetTarget",
        "argstr": "c: Card, target: Card",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "target",
            "type": "Card"
          }
        ],
        "desc": "Set (Card c)'s target card to (Card target) (e.g. Call of the Haunted)"
      },
      {
        "id": "PreAddCounter",
        "argstr": "c: Card, counter_type: number, count: number",
        "args": [
          {
            "id": "c",
            "type": "Card"
          },
          {
            "id": "counter_type",
            "type": "number"
          },
          {
            "id": "count",
            "type": "number"
          }
        ],
        "desc": "Add (int count) counters of (int counter_type) to (Card c)"
      },
      {
        "id": "ReloadFieldBegin",
        "argstr": "flag: number, rule: number",
        "args": [
          {
            "id": "flag",
            "type": "number"
          },
          {
            "id": "rule",
            "type": "number"
          }
        ],
        "desc": "Begin loading the field for a puzzle, with DUEL_ constants in (int flag) under Master Rule (int rule)"
      },
      {
        "id": "ReloadFieldEnd",
        "argstr": "",
        "args": [],
        "desc": "Stop loading the field for a puzzle."
      },
      {
        "id": "SetAIName",
        "argstr": "name: string",
        "args": [
          {
            "id": "name",
            "type": "string"
          }
        ],
        "desc": "Set the name of the AI to (string name)"
      },
      {
        "id": "ShowHint",
        "argstr": "msg: string",
        "args": [
          {
            "id": "msg",
            "type": "string"
          }
        ],
        "desc": "Display a message on screen, saying (string msg)"
      }
    ]
  }
]